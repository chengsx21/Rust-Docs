{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"RustDocs \u4e2a\u4eba\u7b14\u8bb0\u6587\u6863","text":"<p>Instruction</p> <p>\u672c\u9879\u76ee\u662f\u672c\u4eba\u8fdb\u884c Rust \u5b66\u4e60\u7684\u81ea\u7528\u7b14\u8bb0\u3002</p> <p></p>"},{"location":"doc-1/","title":"Cargo \u4e0e\u57fa\u672c\u7c7b\u578b","text":""},{"location":"doc-1/#cargo_1","title":"\u8ba4\u8bc6 Cargo","text":"<ul> <li> <p>\u5305\u7ba1\u7406\u5de5\u5177, \u4f7f\u4efb\u4f55\u7528\u6237\u62ff\u5230\u4ee3\u7801\u90fd\u80fd\u6b63\u5e38\u8fd0\u884c.</p> </li> <li> <p>\u9879\u76ee\u5206\u4e3a\u4e24\u4e2a\u7c7b\u578b <code>bin</code> \u548c <code>lib</code>, \u524d\u8005\u662f \u53ef\u8fd0\u884c\u9879\u76ee, \u540e\u8005\u662f \u4f9d\u8d56\u5e93\u9879\u76ee; \u9ed8\u8ba4\u521b\u5efa <code>bin</code> \u7c7b\u578b\u9879\u76ee.</p> <pre><code>&gt; cargo new my-project\n&gt; cargo new my-lib --lib\n</code></pre> </li> <li> <p>\u9ad8\u6027\u80fd\u4ee3\u7801.</p> <pre><code>&gt; cargo build/run --release\n</code></pre> </li> <li> <p>\u5feb\u901f\u68c0\u67e5\u4ee3\u7801\u7f16\u8bd1\u901a\u8fc7.</p> <pre><code>&gt; cargo check\n</code></pre> </li> <li> <p>\u5f15\u5165\u9879\u76ee\u4f9d\u8d56\u9879.</p> <pre><code>&gt; cargo add num\nnum = \"0.4.1\"\n----------------------------------------------------------\nhammer = { version = \"0.5.0\"}\ncolor = { git = \"https://github.com/bjz/color-rs\" }\ngeometry = { path = \"crates/geometry\" }\n</code></pre> </li> </ul>"},{"location":"doc-1/#println","title":"<code>println!</code>","text":"<ul> <li>\u539f\u751f\u652f\u6301 UTF-8 \u7f16\u7801 \u7684\u5b57\u7b26\u4e32.</li> <li>\u5b8f\u64cd\u4f5c\u7b26, \u662f\u4e00\u79cd \u7279\u6b8a\u7c7b\u578b\u51fd\u6570.</li> <li>\u81ea\u52a8\u8bc6\u522b\u8f93\u51fa\u6570\u636e\u7684\u7c7b\u578b, \u4f7f\u7528 <code>{}</code> \u8f93\u51fa\u5360\u4f4d\u7b26.</li> <li>\u5b9e\u73b0 <code>Display</code> \u7279\u5f81, \u4ee5\u4f7f\u7528 <code>{}</code> \u65b9\u5f0f\u6253\u5370\u7ed3\u6784\u4f53.</li> <li> <p>\u5b9e\u73b0 <code>Debug</code> \u7279\u5f81, \u4ee5\u4f7f\u7528 <code>{:?}</code> \u6216 <code>{:#?}</code> \u65b9\u5f0f\u6253\u5370\u7ed3\u6784\u4f53.</p> </li> <li> <p><code>dbg!</code> \u5b8f\u8f93\u51fa\u5230 <code>stderr</code>, \u800c <code>println!</code> \u8f93\u51fa\u5230 <code>stdout</code>.</p> <pre><code>#[derive(Debug)]\nstruct Rectangle {\nwidth: u32,\nheight: u32,\n}\nfn main() {\nlet scale = 2;\nlet rect1 = Rectangle {\nwidth: dbg!(30 * scale),\nheight: 50,\n};\ndbg!(&amp;rect1);\n}\n------------------------------------------------------\n&gt; [src/main.rs:10] 30 * scale = 60\n&gt; [src/main.rs:14] &amp;rect1 = Rectangle {\nwidth: 60,\nheight: 50,\n}\n</code></pre> </li> </ul>"},{"location":"doc-1/#binding","title":"\u53d8\u91cf\u7ed1\u5b9a Binding","text":"<ul> <li>\u53ef\u53d8\u53d8\u91cf\u4e3a\u7f16\u7a0b\u63d0\u4f9b \u7075\u6d3b\u6027, \u4e0d\u53ef\u53d8\u53d8\u91cf\u63d0\u4f9b \u5b89\u5168\u6027.</li> <li>\u53d8\u91cf\u4f7f\u7528 <code>let</code> \u5173\u952e\u5b57\u58f0\u660e, \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u4e0d\u53ef\u53d8\u7684.</li> <li>\u5e38\u91cf\u4f7f\u7528 <code>const</code> \u5173\u952e\u5b57\u58f0\u660e, \u503c\u7684\u7c7b\u578b\u5fc5\u987b\u6807\u6ce8.</li> <li>\u4f7f\u7528 \u4e0b\u5212\u7ebf\u5f00\u5934 \u6216 <code>#[allow(unused_variables)]</code>, \u5ffd\u7565 \u672a\u4f7f\u7528\u53d8\u91cf.</li> <li>\u4f7f\u7528 <code>mut</code> \u58f0\u660e\u7684\u53d8\u91cf\u53ef\u4ee5 \u4fee\u6539\u540c\u4e00\u5185\u5b58\u5730\u5740\u7684\u503c, \u4e0d\u4f1a\u53d1\u751f\u5185\u5b58\u5bf9\u8c61\u518d\u5206\u914d, \u6027\u80fd\u66f4\u597d; \u4f7f\u7528 <code>let</code> \u58f0\u660e\u7684\u53d8\u91cf \u53ea\u62e5\u6709\u540c\u6837\u540d\u79f0, \u6d89\u53ca\u5185\u5b58\u5bf9\u8c61\u7684\u518d\u5206\u914d.</li> </ul>"},{"location":"doc-1/#deconstruction","title":"\u53d8\u91cf\u89e3\u6784 Deconstruction","text":"<ul> <li>\u4f7f\u7528 <code>let</code> \u8868\u8fbe\u5f0f\u8fdb\u884c \u590d\u6742\u53d8\u91cf\u89e3\u6784, \u5339\u914d\u90e8\u5206\u5185\u5bb9.</li> <li>\u652f\u6301\u4f7f\u7528 \u5143\u7ec4\u3001\u5207\u7247\u548c\u7ed3\u6784\u4f53\u6a21\u5f0f \u8fdb\u884c\u53d8\u91cf\u89e3\u6784.     <pre><code>let (a, mut b): (bool, bool) = (true, false);\n</code></pre></li> </ul>"},{"location":"doc-1/#scalar-types","title":"\u6570\u503c\u7c7b\u578b Scalar Types","text":"<ul> <li> <p>\u901a\u5e38\u6839\u636e\u53d8\u91cf\u503c\u548c\u4e0a\u4e0b\u6587 \u81ea\u52a8\u63a8\u5bfc \u53d8\u91cf\u7c7b\u578b, \u67d0\u4e9b\u60c5\u51b5\u9700\u8fdb\u884c \u624b\u52a8\u6807\u6ce8.</p> </li> <li> <p>\u5141\u8bb8\u5728\u590d\u6742\u7c7b\u578b\u4e0a\u5b9a\u4e49\u8fd0\u7b97\u7b26, \u88ab\u79f0\u4e3a \u8fd0\u7b97\u7b26\u91cd\u8f7d.</p> </li> <li> <p>\u6d6e\u70b9\u6570 \u91c7\u7528 IEEE-754 \u6807\u51c6, \u4f46\u662f\u6ca1\u6709\u5b9e\u73b0 <code>std::cmp::Eq</code> \u7279\u5f81, \u5b58\u5728 \u7cbe\u5ea6\u95ee\u9898, \u65e0\u6cd5\u4f5c\u4e3a <code>HashMap</code> \u7684 <code>Key</code> \u7c7b\u578b.</p> <pre><code>assert!(0.1_f32 + 0.2_f32 == 0.3_f32);\nassert!((0.1_f64 + 0.2 - 0.3).abs() &lt; 0.001);\n</code></pre> </li> <li> <p>\u5e8f\u5217 \u53ea\u5141\u8bb8\u6570\u5b57\u6216\u5b57\u7b26\u7c7b\u578b; \u5982 <code>1..5</code> \u751f\u6210 1 \u5230 4 \u7684\u8fde\u7eed\u6570\u5b57, <code>1..=5</code> \u751f\u6210 1 \u5230 5 \u7684\u8fde\u7eed\u6570\u5b57.</p> <pre><code>assert_eq!((1..5), Range{start: 1, end: 5});\nassert_eq!((1..=5), RangeInclusive::new(1, 5));\n</code></pre> </li> <li> <p>\u7c7b\u578b\u8f6c\u6362 \u5fc5\u987b\u662f \u663e\u5f0f\u8fdb\u884c \u7684.</p> <pre><code>let n: u16 = 38_u8 as u16;\n----------------------------------------------------------\nfor c in 'a'..='z' {\nprintln!(\"{}\", c as u8);\n}\n</code></pre> </li> <li> <p>\u53ef\u4ee5\u5728 \u6570\u503c\u4e0a\u4f7f\u7528\u65b9\u6cd5.</p> <pre><code>let w: f32 = 13.14_f32.round();\n</code></pre> </li> </ul>"},{"location":"doc-1/#charbooleanunion-types","title":"\u5b57\u7b26\u3001\u5e03\u5c14\u3001\u5355\u5143\u7c7b\u578b Char/Boolean/Union Types","text":"<ul> <li> <p>\u5b57\u7b26\u7c7b\u578b \u652f\u6301 <code>Unicode</code> \u7f16\u7801, \u5360\u7528\u5185\u5b58\u7684\u5927\u5c0f\u4e3a 4 \u4e2a\u5b57\u8282.</p> <pre><code>let x: char = '\u4e2d';\nprintln!(\"{}\", std::mem::size_of_val(&amp;x));\n----------------------------------------------------------\nfor c in '\u4f60'..='\u6211' {\nprintln!(\"\u5b57\u7b26 c = {}\", c as u32);\nprintln!(\"\u6c49\u5b57 c = {}\", c);\n}\n</code></pre> </li> <li> <p>\u5e03\u5c14\u7c7b\u578b\u503c\u4e3a <code>true</code> \u548c <code>false</code>, \u5360\u7528\u5185\u5b58\u7684\u5927\u5c0f\u4e3a 1 \u4e2a\u5b57\u8282.</p> </li> <li> <p>\u5355\u5143\u7c7b\u578b \u4f5c\u4e3a <code>main</code> \u51fd\u6570\u3001<code>println!</code> \u5b8f\u7b49\u7684\u8fd4\u56de\u503c\u6216 <code>map</code> \u7684\u503c (\u6b64\u65f6 <code>map</code> \u76f8\u5f53\u4e8e <code>set</code>), \u8868\u793a \u4e0d\u5206\u914d\u4efb\u4f55\u5185\u5b58, \u53ea\u7528\u6765 \u5360\u4f4d.</p> <pre><code>let unit: () = ();\nprintln!(\"{}\", std::mem::size_of_val(&amp;unit));\n</code></pre> </li> <li> <p>\u5355\u5143\u7c7b\u578b\u4fbf\u4e8e \u7edf\u4e00\u6709\u8fd4\u56de\u503c\u548c\u65e0\u8fd4\u56de\u503c\u7684\u51fd\u6570, \u4ee5\u4fbf\u5c06\u51fd\u6570\u5f53\u505a\u5bf9\u8c61\u4f7f\u7528.</p> </li> </ul>"},{"location":"doc-1/#statement-and-expression","title":"\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f Statement and Expression","text":"<ul> <li> <p><code>let</code> \u662f\u8bed\u53e5, \u4e0d\u8fd4\u56de\u503c, \u4e0d\u80fd\u7ed9\u5176\u5b83\u53d8\u91cf\u8d4b\u503c.</p> <pre><code>let y = {\nlet x_squared = x * x;\nlet x_cube = x_squared * x;\n// \u4e0b\u9762\u8868\u8fbe\u5f0f\u7684\u503c\u5c06\u88ab\u8d4b\u7ed9 `y`\nx_cube + x_squared + x\n};\n----------------------------------------------------------\nlet z = {\n// \u5206\u53f7\u8ba9\u8868\u8fbe\u5f0f\u53d8\u6210\u4e86\u8bed\u53e5, \u8fd4\u56de\u7684\u662f\u8bed\u53e5\u7684\u503c `()`\n2 * x;\n};\n</code></pre> </li> <li> <p>\u8c03\u7528 \u51fd\u6570\u3001\u5b8f \u662f \u8868\u8fbe\u5f0f, \u4f1a\u8fdb\u884c\u6c42\u503c\u5e76\u8fd4\u56de\u503c, \u6216\u9690\u5f0f\u8fd4\u56de\u4e00\u4e2a\u5355\u5143\u7c7b\u578b.</p> <pre><code>// `{}` \u662f\u4e00\u4e2a\u5757\u4f5c\u7528\u57df, \u6ca1\u6709\u8fd4\u56de\u503c, \u56e0\u6b64\u9690\u5f0f\u5730\u8fd4\u56de `()`\nassert_eq!((), {});\n</code></pre> </li> <li> <p>\u57fa\u4e8e\u8868\u8fbe\u5f0f \u662f \u51fd\u6570\u5f0f\u8bed\u8a00 \u7684\u91cd\u8981\u7279\u5f81.</p> </li> </ul>"},{"location":"doc-1/#function","title":"\u51fd\u6570 Function","text":"<ul> <li> <p>Rust \u662f \u5f3a\u7c7b\u578b\u8bed\u8a00, \u9700\u8981\u4e3a\u51fd\u6570\u53c2\u6570\u90fd\u6807\u8bc6\u51fa\u5177\u4f53\u7c7b\u578b.</p> </li> <li> <p>\u51fd\u6570\u662f\u8868\u8fbe\u5f0f, \u8fd4\u56de\u503c\u662f\u51fd\u6570\u4f53\u6700\u540e\u4e00\u6761\u8868\u8fbe\u5f0f, \u53ef\u4ee5 \u4f7f\u7528 <code>return</code> \u63d0\u524d\u8fd4\u56de.</p> <pre><code>fn plus_or_minus(x:i32) -&gt; i32 {\nif x &gt; 5 {\nreturn x - 5;\n}\nx + 5\n}\n</code></pre> </li> <li> <p>\u51fd\u6570\u4f53\u6700\u540e\u4e00\u6761\u4e0d\u662f\u8868\u8fbe\u5f0f\u4e14\u6ca1\u6709 <code>return</code> \u5173\u952e\u5b57\u65f6, \u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u503c, \u76f8\u5f53\u4e8e\u8fd4\u56de\u7c7b\u578b\u4e3a <code>()</code>.</p> <pre><code>fn report&lt;T: std::fmt::Debug&gt;(item: T) {\nprintln!(\"{:?}\", item);\n}\n----------------------------------------------------------\nfn clear(text: &amp;mut String) -&gt; () {\n*text = String::from(\"\");\n}\n</code></pre> </li> <li> <p>\u7528 <code>!</code> \u4f5c\u51fd\u6570\u8fd4\u56de\u7c7b\u578b, \u8868\u793a\u51fd\u6570 \u6c38\u4e0d\u8fd4\u56de, \u79f0\u4e3a \u53d1\u6563\u51fd\u6570.</p> <pre><code>fn dead_end() -&gt; ! {\npanic!(\"\u5d29\u6e83\u5427\");\n}\n----------------------------------------------------------\nfn never_return() -&gt; ! {\nloop {\nprintln!(\"I return nothing\");\nstd::thread::sleep(std::time::Duration::from_secs(1))\n}\n}\n</code></pre> </li> <li> <p>\u53d1\u6563\u51fd\u6570\u4e5f\u53ef\u4ee5 \u7528\u4e8e <code>match</code> \u8868\u8fbe\u5f0f\u5339\u914d, \u66ff\u4ee3\u4efb\u4f55\u7c7b\u578b\u7684\u503c.</p> <pre><code>let _v = match b {\ntrue =&gt; 1,\nfalse =&gt; {\nprintln!(\"Success!\");\npanic!(\"No value for `false` but panic\")\n}\n};\nprintln!(\"Exercise Failed!\");\n</code></pre> </li> </ul>"},{"location":"doc-2/","title":"\u6240\u6709\u6743\u4e0e\u8fdb\u9636\u7c7b\u578b","text":""},{"location":"doc-2/#ownership","title":"\u6240\u6709\u6743 Ownership","text":"<ul> <li> <p>\u7f16\u8bd1\u5668\u5728 \u7f16\u8bd1\u671f \u8fdb\u884c\u6240\u6709\u6743\u68c0\u67e5, \u5bf9\u7a0b\u5e8f \u8fd0\u884c\u671f\u6ca1\u6709\u6027\u80fd\u635f\u5931.</p> </li> <li> <p>\u5b9e\u73b0\u4e86 RAII (Resource Acquisition Is Initialization programming) \u539f\u5219.</p> </li> <li> <p>\u89c4\u5219:</p> <ul> <li>\u6bcf\u4e2a\u503c\u88ab\u4e00\u4e2a\u53d8\u91cf\u62e5\u6709, \u79f0\u4e3a\u503c\u7684\u6240\u6709\u8005.</li> <li>\u4e00\u4e2a\u503c\u540c\u65f6\u53ea\u88ab\u4e00\u4e2a\u53d8\u91cf\u62e5\u6709.</li> <li>\u6240\u6709\u8005\u79bb\u5f00\u4f5c\u7528\u57df\u8303\u56f4\u65f6, \u503c\u5c06\u88ab\u4e22\u5f03.</li> </ul> </li> <li> <p>\u5b57\u7b26\u4e32 <code>String</code> \u7531\u5b58\u50a8\u5728\u6808\u4e2d\u7684\u5806\u6307\u9488\u3001\u5b57\u7b26\u4e32\u957f\u5ea6\u3001\u5b57\u7b26\u4e32\u5bb9\u91cf\u7ec4\u6210; \u5b57\u7b26\u4e32\u6570\u7ec4\u5206\u914d\u5230\u5806\u4e0a, \u52a8\u6001\u4f38\u7f29, \u5b58\u50a8\u7f16\u8bd1\u65f6\u5927\u5c0f\u672a\u77e5\u7684\u6587\u672c; \u62f7\u8d1d\u540e\u6240\u6709\u6743\u8f6c\u79fb, \u79f0\u4e3a \u79fb\u52a8 (<code>move</code>).</p> <pre><code>let mut s = String::from(\"hello\"); // `::` \u662f\u8c03\u7528\u64cd\u4f5c\u7b26.\ns.push_str(\", world!\");\nprintln!(\"{}\", s);\n----------------------------------------------------------\nlet x = String::from(\"hello, world\");\n// \u9632\u6b62\u6240\u6709\u6743\u4ece x \u8f6c\u79fb\u5230 y.\nlet y = x.clone()/x.as_str()/&amp;x;\n</code></pre> </li> <li> <p>\u5b57\u7b26\u4e32\u5b57\u9762\u503c <code>&amp;str</code> \u88ab\u786c\u7f16\u7801\u5230\u5168\u5c40\u5185\u5b58\u533a, \u4e0d\u53ef\u53d8; \u53d8\u91cf\u7ed1\u5b9a\u4e86\u5f15\u7528\u7684\u6240\u6709\u6743, \u6307\u5411\u5b57\u7b26\u4e32\u7684\u5185\u5b58\u5730\u5740, \u62f7\u8d1d\u65f6\u65e0\u9700\u6240\u6709\u6743\u8f6c\u79fb; \u751f\u547d\u5468\u671f\u6301\u7eed\u5230\u7a0b\u5e8f\u7ed3\u675f, \u7531\u64cd\u4f5c\u7cfb\u7edf\u56de\u6536\u5185\u5b58.</p> <pre><code>let x: &amp;str = \"hello, world\";\nlet y = x; // \u5f15\u7528\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\nprintln!(\"{},{}\", x, y);\n</code></pre> </li> <li> <p>\u6574\u6570\u662f\u57fa\u672c\u6570\u636e\u7c7b\u578b, \u5728\u6808\u4e2d\u5927\u5c0f\u56fa\u5b9a, \u901a\u8fc7\u503c\u62f7\u8d1d\u5b8c\u6210\u8d4b\u503c, \u65e0\u9700\u6240\u6709\u6743\u8f6c\u79fb, \u79f0\u4e3a \u62f7\u8d1d (<code>copy</code>).</p> <pre><code>let x = 5;\nlet y = x;\n</code></pre> </li> <li> <p>\u514b\u9686 (\u6df1\u62f7\u8d1d) \u652f\u6301\u6df1\u5ea6\u590d\u5236, \u65e0\u9700\u6240\u6709\u6743\u8f6c\u79fb; \u4efb\u4f55\u81ea\u52a8\u7684\u590d\u5236\u90fd\u4e0d\u662f \u514b\u9686 (<code>clone</code>), \u5bf9\u8fd0\u884c\u65f6\u6027\u80fd\u5f71\u54cd\u8f83\u5c0f.</p> </li> <li> <p>\u62f7\u8d1d (\u6d45\u62f7\u8d1d) \u53ea\u53d1\u751f\u5728\u6808\u4e0a, \u6027\u80fd\u5f88\u9ad8; \u65e0\u9700\u5206\u914d\u5185\u5b58\u6216\u5f62\u5f0f\u8d44\u6e90\u7684\u7c7b\u578b (\u62e5\u6709 <code>Copy</code> \u7279\u5f81) \u53ef\u4ee5\u62f7\u8d1d, \u5305\u62ec \u6574\u6570\u3001\u5e03\u5c14\u3001\u6d6e\u70b9\u6570\u3001\u5b57\u7b26\u3001\u5143\u7ec4\u3001\u4e0d\u53ef\u53d8\u5f15\u7528 \u7b49\u7c7b\u578b.</p> <pre><code>let x = (1, 2, (), \"hello\");// \u53ef\u4ee5\u76f4\u63a5\u62f7\u8d1d\u5143\u7ec4\nlet y = x;\nprintln!(\"{:?}, {:?}\", x, y);\n</code></pre> </li> <li> <p>\u5c06\u503c\u4f20\u9012\u7ed9\u51fd\u6570, \u4e5f\u4f1a\u53d1\u751f <code>move</code> \u6216 <code>copy</code>, \u5bfc\u81f4 \u6240\u6709\u6743\u8f6c\u79fb.</p> </li> <li> <p>\u53ef\u53d8\u6027: \u5f53 \u6240\u6709\u6743\u8f6c\u79fb \u65f6, \u53ef\u53d8\u6027 \u4e5f\u53ef\u4ee5\u968f\u4e4b\u6539\u53d8.</p> <pre><code>let s = String::from(\"hello, \");\nlet mut s1 = s;\ns1.push_str(\"world\")\n</code></pre> </li> <li> <p>\u90e8\u5206 <code>move</code>: \u89e3\u6784\u4e00\u4e2a\u53d8\u91cf\u65f6, \u540c\u65f6\u4f7f\u7528 <code>move</code> \u548c\u5f15\u7528\u6a21\u5f0f\u7ed1\u5b9a \u7684\u65b9\u5f0f. \u8f6c\u79fb\u4e86\u53d8\u91cf\u4e00\u90e8\u5206\u7684\u6240\u6709\u6743, \u83b7\u53d6\u4e86\u53e6\u4e00\u90e8\u5206\u7684\u5f15\u7528. \u539f\u53d8\u91cf\u65e0\u6cd5\u4f7f\u7528, \u4f46 \u6ca1\u8f6c\u79fb\u6240\u6709\u6743\u7684\u90e8\u5206\u4ecd\u53ef\u4ee5\u4f7f\u7528.</p> <pre><code>#[derive(Debug)]\nstruct Person {\nname: String,\nage: Box&lt;u8&gt;,\n}\nlet person = Person {\nname: String::from(\"Alice\"),\nage: Box::new(20),\n};\n\n// person.name \u7684\u6240\u6709\u6743\u8f6c\u79fb\u7ed9\u65b0\u7684\u53d8\u91cf `name`.\n// ref \u7684\u4f7f\u7528\u76f8\u5f53\u4e8e: let age = &amp;person.age .\nlet Person { name, ref age } = person;\n// Error!\n// println!(\"The person struct is {:?}\", person);\nprintln!(\"The person's age is {}\", person.age);\n----------------------------------------------------------\nlet t = (String::from(\"hello\"), String::from(\"world\"));\nlet (ref s1, ref s2) = t;\nprintln!(\"{:?}, {:?}, {:?}\", s1, s2, t);\n</code></pre> </li> </ul>"},{"location":"doc-2/#reference","title":"\u5f15\u7528 Reference","text":"<ul> <li> <p>\u89c4\u5219:</p> <ul> <li>\u540c\u4e00\u65f6\u523b, \u53ea\u80fd\u62e5\u6709 \u4e00\u4e2a\u53ef\u53d8\u5f15\u7528, \u6216 \u4efb\u610f\u591a\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528.</li> <li>\u5f15\u7528\u5fc5\u987b\u603b\u662f\u6709\u6548\u7684.</li> </ul> </li> <li> <p>\u5e38\u89c4\u5f15\u7528\u662f\u4e00\u4e2a \u6307\u9488\u7c7b\u578b, \u6307\u5411\u5bf9\u8c61\u5b58\u50a8\u7684 \u5185\u5b58\u5730\u5740.</p> </li> <li> <p>We call the action of creating a reference (\u5f15\u7528) borrowing(\u501f\u7528).</p> </li> <li> <p>\u4e0d\u5141\u8bb8\u6bd4\u8f83\u6574\u6570\u4e0e\u5f15\u7528, \u5fc5\u987b\u4f7f\u7528 \u89e3\u5f15\u7528\u8fd0\u7b97\u7b26 \u89e3\u51fa\u5f15\u7528\u6307\u5411\u7684\u503c.</p> <pre><code>let x = 5;\nlet y = &amp;x;\nassert_eq!(5, x);\nassert_eq!(5, *y);\n</code></pre> </li> <li> <p>\u5f15\u7528\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570, \u5141\u8bb8 \u4f7f\u7528\u503c, \u4f46 \u4e0d\u83b7\u53d6\u6240\u6709\u6743.</p> </li> <li> <p>\u58f0\u660e \u53ef\u53d8\u7c7b\u578b \u540e, \u53ef\u4ee5\u521b\u5efa \u53ef\u53d8\u5f15\u7528 \u548c\u63a5\u53d7\u53ef\u53d8\u5f15\u7528\u53c2\u6570\u7684\u51fd\u6570; <code>.</code> \u8fd0\u7b97\u7b26\u81ea\u52a8\u4e3a\u5de6\u7aef\u64cd\u4f5c\u6570\u8fdb\u884c\u89e3\u5f15\u7528. </p> <pre><code>fn main() {\nlet mut s = String::from(\"hello\");\nchange(&amp;mut s);\n}\nfn change(some_string: &amp;mut String) {\nsome_string.push_str(\", world\");\n}\n</code></pre> </li> <li> <p>\u8fdb\u884c\u53ef\u53d8\u5f15\u7528\u540e, \u4e0d\u80fd\u901a\u8fc7\u975e\u53ef\u53d8\u5f15\u7528\u6216\u8005\u76f4\u63a5\u8bbf\u95ee\u8fd9\u4e2a\u503c (\u5373 \u53ef\u53d8\u5f15\u7528\u7684\u4f7f\u7528\u8303\u56f4 \u4e0d\u80fd \u4e0e\u5176\u540c\u6e90\u5f15\u7528\u7684\u4f7f\u7528\u8303\u56f4\u5b58\u5728\u4ea4\u96c6).</p> <pre><code>let mut a = String::from(\"123\");\nlet b = &amp;mut a;\nprintln!(\"a = {}, b = {}\", a, b); // Error!\n----------------------------------------------------------\nlet mut x = 1;\nlet y = &amp;mut x;\nx = 2; // Error!\n*y = 3;\n</code></pre> </li> <li> <p>\u540c\u4e00\u4f5c\u7528\u57df\u53ea\u80fd\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528; \u7f16\u8bd1\u5668\u901a\u8fc7 Non-Lexical Lifetimes \u4f18\u5316\u884c\u4e3a, \u627e\u5230\u5f15\u7528\u5728\u4f5c\u7528\u57df\u7ed3\u675f\u524d\u5c31\u4e0d\u518d\u88ab\u4f7f\u7528\u7684\u4f4d\u7f6e.</p> <pre><code>fn main() {\nlet mut s = String::from(\"hello\");\nlet r1 = &amp;s;\nlet r2 = &amp;s;\nprintln!(\"{} and {}\", r1, r2); // \u65b0\u7f16\u8bd1\u5668, r1, r2 \u4f5c\u7528\u57df\u7ed3\u675f\nlet r3 = &amp;mut s;\nprintln!(\"{}\", r3);\n}   // \u8001\u7f16\u8bd1\u5668, r1, r2, r3 \u4f5c\u7528\u57df\u7ed3\u675f\n// \u65b0\u7f16\u8bd1\u5668, r3 \u4f5c\u7528\u57df\u7ed3\u675f\n</code></pre> </li> <li> <p>\u7f16\u8bd1\u5668\u786e\u4fdd\u5f15\u7528 \u4e0d\u4f1a\u53d8\u6210\u60ac\u5782\u72b6\u6001, \u91ca\u653e\u6570\u636e\u524d\u5fc5\u987b\u5148\u505c\u6b62\u5176\u5f15\u7528\u7684\u4f7f\u7528; \u9700\u8981\u8003\u8651\u751f\u547d\u5468\u671f\u624d\u53ef\u6b63\u5e38\u8fd4\u56de\u5f15\u7528;</p> <pre><code>fn main() {\nlet reference_to_nothing = dangle();\n}\nfn dangle() -&gt; &amp;String {\nlet s = String::from(\"hello\");\n&amp;s // \u5f15\u7528\u4f1a\u6307\u5411\u4e00\u4e2a\u65e0\u6548\u7684 `String`.\n}\n</code></pre> </li> <li> <p>\u53ef\u4ee5 \u4f7f\u7528 <code>ref</code> \u83b7\u53d6\u4e00\u4e2a\u503c\u7684\u5f15\u7528.</p> <pre><code>let c = '\u4e2d';\nlet r1 = &amp;c;\nlet ref r2 = c;\nassert_eq!(*r1, *r2);\n</code></pre> </li> </ul>"},{"location":"doc-2/#slice","title":"\u5207\u7247 Slice","text":"<ul> <li> <p>\u5207\u7247\u5f15\u7528\u96c6\u5408\u4e2d\u90e8\u5206\u8fde\u7eed\u7684\u5143\u7d20\u5e8f\u5217, \u800c\u975e\u5f15\u7528\u6574\u4e2a\u96c6\u5408.</p> <pre><code>// \u5bf9\u4e8e String \u800c\u8a00, \u5207\u7247\u662f\u5bf9\u67d0\u4e00\u90e8\u5206\u7684\u5f15\u7528.\n// String \u5207\u7247\u7684\u7c7b\u578b\u6807\u8bc6\u662f &amp;str.\nlet s = String::from(\"hello world\");\nlet hello = &amp;s[0..5]; // \u7b49\u4ef7: let hello = &amp;s[..5];\nlet world = &amp;s[6..11]; // \u7b49\u4ef7: let world = &amp;s[6..];\n----------------------------------------------------------\n// \u548c\u5b57\u7b26\u4e32\u5207\u7247\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e00\u6837.\nlet a = [1, 2, 3, 4, 5];\nlet slice = &amp;a[1..3];\nassert_eq!(slice, &amp;[2, 3]);\n</code></pre> </li> <li> <p>\u5207\u7247\u7684\u957f\u5ea6\u65e0\u6cd5\u5728\u7f16\u8bd1\u671f\u5f97\u77e5, \u65e0\u6cd5\u76f4\u63a5\u4f7f\u7528.</p> </li> <li> <p>\u4f7f\u7528 \u5207\u7247\u7279\u6307\u5207\u7247\u5f15\u7528, \u5360\u7528 2 \u4e2a\u5b57\u7684\u5185\u5b58\u7a7a\u95f4, \u5373\u6307\u5411\u6570\u636e\u7684\u6307\u9488\u548c\u5207\u7247\u957f\u5ea6.</p> <pre><code>let arr: [char; 3] = ['\u4e2d', '\u56fd', '\u4eba'];\nlet slice = &amp;arr[..2];\nassert!(std::mem::size_of_val(&amp;slice) == 16);\n</code></pre> </li> </ul>"},{"location":"doc-2/#string","title":"\u5b57\u7b26\u4e32 String","text":"<ul> <li> <p>\u5b57\u7b26\u662f Unicode \u7c7b\u578b, \u6bcf\u4e2a\u5b57\u7b26\u5360\u636e 4 \u4e2a\u5b57\u8282\u5185\u5b58\u7a7a\u95f4.</p> </li> <li> <p><code>str</code>, <code>&amp;str</code>, <code>String</code> \u662f UTF-8 \u5b57\u7b26\u4e32\u7c7b\u578b, \u5b57\u7b26\u6240\u5360\u5b57\u8282\u6570\u662f\u53d8\u5316\u7684, \u964d\u4f4e\u4e86\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4.</p> </li> <li> <p>\u4f7f\u7528 <code>&amp;</code> \u53ef\u4ee5\u5c06 <code>Box&lt;str&gt;</code> \u8f6c\u6362\u4e3a <code>&amp;str</code> \u7c7b\u578b.</p> <pre><code>fn main() {\nlet s: Box&lt;str&gt; = \"hello, world\".into();\ngreetings(&amp;s)\n}\nfn greetings(s: &amp;str) {\nprintln!(\"{}\",s)\n}\n</code></pre> </li> <li> <p><code>String</code> \u5e95\u5c42\u5b58\u50a8\u683c\u5f0f\u662f <code>Vec&lt;u8&gt;</code>, \u4e0d\u5141\u8bb8\u7d22\u5f15 (\u5426\u5219\u9700\u904d\u5386\u6765\u5b9a\u4f4d\u5408\u6cd5\u5b57\u7b26).</p> <pre><code>let hello = \"\u4e2d\u56fd\u4eba\";\nlet s = &amp;hello[0..2];\n----------------------------------------------------------\n&gt; thread 'main' panicked at 'byte index 2 is not a char boundary; it is inside '\u4e2d' (bytes 0..3) of `\u4e2d\u56fd\u4eba`', src/main.rs:4:14\n&gt; note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre> </li> <li> <p><code>String</code> \u5b57\u7b26\u4e32:</p> <ul> <li> <p><code>&amp;String</code> \u53ef\u4ee5\u88ab\u9690\u5f0f\u5730\u8f6c\u6362\u6210 <code>&amp;str</code> \u7c7b\u578b.</p> </li> <li> <p>\u8ffd\u52a0 - Push:</p> <ul> <li>\u4f7f\u7528 <code>push()</code> \u8ffd\u52a0\u5b57\u7b26, \u4f7f\u7528 <code>push_str()</code> \u8ffd\u52a0\u5b57\u7b26\u4e32\u5b57\u9762\u91cf.</li> <li>\u4e0d\u4f1a\u8fd4\u56de\u65b0\u5b57\u7b26\u4e32, \u5b57\u7b26\u4e32\u53d8\u91cf\u5fc5\u987b\u7531 <code>mut</code> \u5173\u952e\u5b57\u4fee\u9970.</li> </ul> </li> <li> <p>\u63d2\u5165 - Insert:</p> <ul> <li>\u4f7f\u7528 <code>insert()</code> \u63d2\u5165\u5b57\u7b26, <code>insert_str()</code> \u63d2\u5165\u5b57\u7b26\u4e32\u5b57\u9762\u91cf.</li> <li>\u4e0d\u4f1a\u8fd4\u56de\u65b0\u5b57\u7b26\u4e32, \u5b57\u7b26\u4e32\u53d8\u91cf\u5fc5\u987b\u7531 <code>mut</code> \u5173\u952e\u5b57\u4fee\u9970.</li> </ul> </li> <li> <p>\u66ff\u6362 - Replace:</p> <ul> <li><code>replace()</code> \u66ff\u6362\u6240\u6709\u5339\u914d\u7684\u5b57\u7b26\u4e32, \u8fd4\u56de\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32.</li> <li><code>replacen()</code> \u63a7\u5236\u66ff\u6362\u7684\u5339\u914d\u5b57\u7b26\u4e32\u7684\u4e2a\u6570, \u8fd4\u56de\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32.</li> <li><code>replace_range()</code> \u63a7\u5236\u66ff\u6362\u5b57\u7b26\u4e32\u7684\u8303\u56f4, \u76f4\u63a5\u64cd\u4f5c\u539f\u5b57\u7b26\u4e32, \u4e0d\u4f1a\u8fd4\u56de\u65b0\u5b57\u7b26\u4e32, \u5b57\u7b26\u4e32\u53d8\u91cf\u5fc5\u987b\u7531 <code>mut</code> \u5173\u952e\u5b57\u4fee\u9970.</li> </ul> </li> <li> <p>\u5220\u9664 - Delete:</p> <ul> <li><code>pop()</code> \u5220\u9664\u5e76\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5b57\u7b26, \u76f4\u63a5\u64cd\u4f5c\u539f\u6765\u7684\u5b57\u7b26\u4e32, \u8fd4\u56de\u503c\u662f <code>Option</code> \u7c7b\u578b (\u5b57\u7b26\u4e32\u4e3a\u7a7a\u5219\u8fd4\u56de <code>None</code>).</li> <li><code>remove()</code> \u5220\u9664\u5e76\u8fd4\u56de\u6307\u5b9a\u4f4d\u7f6e\u7684\u5b57\u7b26, \u76f4\u63a5\u64cd\u4f5c\u539f\u6765\u7684\u5b57\u7b26\u4e32.</li> <li><code>truncate()</code> \u5220\u9664\u4ece\u6307\u5b9a\u4f4d\u7f6e\u5f00\u59cb\u5230\u7ed3\u5c3e\u7684\u5b57\u7b26, \u76f4\u63a5\u64cd\u4f5c\u539f\u6765\u7684\u5b57\u7b26\u4e32, \u65e0\u8fd4\u56de\u503c.</li> <li><code>clear()</code> \u6e05\u7a7a\u5b57\u7b26\u4e32, \u76f4\u63a5\u64cd\u4f5c\u539f\u6765\u7684\u5b57\u7b26\u4e32, \u65e0\u8fd4\u56de\u503c.</li> </ul> </li> <li> <p>\u8fde\u63a5 - Concatenate:</p> <ul> <li>\u4f7f\u7528 <code>+</code> \u6216\u8005 <code>+=</code> \u8fde\u63a5\u5b57\u7b26\u4e32.</li> <li><code>+</code> \u8fd4\u56de\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32, \u53d8\u91cf\u58f0\u660e\u4e0d\u9700\u8981 <code>mut</code> \u5173\u952e\u5b57\u4fee\u9970.</li> <li><code>&amp;str</code> \u6dfb\u52a0\u5230 <code>String</code>, \u8fd4\u56de\u65b0 <code>String</code>, \u539f <code>String</code> \u6240\u6709\u6743\u8f6c\u79fb.</li> </ul> <pre><code>impl Add&lt;&amp;str&gt; for String {\ntype Output = String;\n#[inline]\nfn add(mut self, other: &amp;str) -&gt; String {\nself.push_str(other);\nself\n}\n}\n------------------------------------------------------\nlet s1 = String::from(\"tic\");\nlet s2 = String::from(\"tac\");\nlet s3 = String::from(\"toe\");\n// String = String + &amp;str + &amp;str + &amp;str + &amp;str\nlet s = s1 + \"-\" + &amp;s2 + \"-\" + &amp;s3;\n</code></pre> </li> <li> <p><code>chars()</code> \u65b9\u6cd5\u4ee5 Unicode \u5b57\u7b26 \u7684\u65b9\u5f0f\u904d\u5386\u5b57\u7b26\u4e32.</p> </li> <li> <p><code>bytes()</code> \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u5e95\u5c42 \u5b57\u8282\u6570\u7ec4 \u8868\u73b0\u5f62\u5f0f</p> <pre><code>for c in \"\u4e2d\u56fd\u4eba\".chars() {\nprintln!(\"{}\", c);\n}\n------------------------------------------------------\nfor b in \"\u4e2d\u56fd\u4eba\".bytes() {\nprintln!(\"{}\", b);\n}\n</code></pre> </li> <li> <p><code>String::with_capacity()</code> \u8fd4\u56de\u5177\u6709 \u6307\u5b9a\u521d\u59cb\u5927\u5c0f\u5bb9\u91cf \u7684\u5b57\u7b26\u4e32.</p> </li> </ul> </li> <li> <p>\u5b57\u8282\u5b57\u7b26\u4e32 \u662f \u975e UTF-8 \u7c7b\u578b.</p> <pre><code>use std::str;\nfn main() {\nlet bytestring: &amp;[u8; 21] = b\"this is a byte string\";\n\n// \u5b57\u8282\u6570\u7ec4\u6ca1\u6709\u5b9e\u73b0 `Display` \u7279\u5f81, \u53ea\u80fd\u4f7f\u7528 `Debug` \u65b9\u5f0f\u6253\u5370\nprintln!(\"A byte string: {:?}\", bytestring);\n\n// \u5b57\u8282\u6570\u7ec4\u53ef\u4ee5\u4f7f\u7528\u8f6c\u4e49, \u4e0d\u652f\u6301 unicode \u8f6c\u4e49\nlet escaped = b\"\\x52\\x75\\x73\\x74 as bytes\";\n// let escaped = b\"\\u{211D} is not allowed\";\nprintln!(\"Some escaped bytes: {:?}\", escaped);\n\n// raw string\nlet raw_bytestring = br\"\\u{211D} is not escaped here\";\nprintln!(\"{:?}\", raw_bytestring);\n// \u5b57\u8282\u6570\u7ec4\u8f6c\u6210 `str` \u7c7b\u578b\u53ef\u80fd\u4f1a\u5931\u8d25\nif let Ok(my_str) = str::from_utf8(raw_bytestring) {\nprintln!(\"And the same as text: '{}'\", my_str);\n}\n\n// \u5b57\u8282\u6570\u7ec4\u53ef\u4ee5\u4e0d\u662f UTF-8 \u683c\u5f0f\nlet shift_jis = b\"\\x82\\xe6\\x82\\xa8\\x82\\xb1\\x82\\xbb\"; // \"\u3088\u3046\u3053\u305d\" in SHIFT-JIS\n// \u4f46\u662f\u8f6c\u6210 `str` \u7c7b\u578b\u53ef\u80fd\u4f1a\u5931\u8d25\nmatch str::from_utf8(shift_jis) {\nOk(my_str) =&gt; println!(\"Successful: '{}'\", my_str),\nErr(e) =&gt; println!(\"Failed: {:?}\", e),\n};\n}\n</code></pre> </li> <li> <p>\u4f7f\u7528 <code>utf8_slice</code> \u6309\u7167 \u5b57\u7b26\u7684\u81ea\u7136\u7d22\u5f15\u65b9\u5f0f \u5bf9 UTF-8 \u5b57\u7b26\u4e32 \u8fdb\u884c\u5207\u7247\u8bbf\u95ee.</p> <pre><code>&gt; cargo add utf8_slice\n------------------------------------------------------\nuse utf8_slice;\nfn main() {\nlet s = \"The \ud83d\ude80 goes to the \ud83c\udf11!\";\nlet rocket = utf8_slice::slice(s, 4, 5);\n// Will equal \"\ud83d\ude80\"\nprintln!(\"{}\", rocket)\n}\n</code></pre> </li> <li> <p>\u4f7f\u7528 <code>from_utf8</code> \u5c06 UTF-8 \u6570\u7ec4 \u8f6c\u5316\u4e3a UTF-8 \u5b57\u7b26\u4e32.</p> <pre><code>fn main() {\nlet mut s = String::new();\ns.push_str(\"hello\");\n\nlet v = vec![104, 101, 108, 108, 111];\nlet s1 = String::from_utf8(v).unwrap();\n\nassert_eq!(s, s1);\nprintln!(\"Success!\")\n}\n</code></pre> </li> <li> <p><code>String</code> \u662f\u4e00\u4e2a \u5b58\u50a8\u5728\u6808\u4e0a \u7684 \u667a\u80fd\u6307\u9488 \u7ed3\u6784\u4f53, \u6307\u5411 \u5806\u4e0a\u7684\u5b57\u7b26\u4e32\u5e95\u5c42\u6570\u636e.</p> <pre><code>let story = String::from(\"Rust By Practice\");\n// Prevent automatically dropping the String's data\nlet mut story = std::mem::ManuallyDrop::new(story);\n\nlet ptr = story.as_mut_ptr();\nlet len = story.len();\nlet capacity = story.capacity();\n\n// Re-build a String out of ptr, len, and capacity.\nlet s = unsafe { String::from_raw_parts(ptr, len, capacity) };\nassert_eq!(*story, s);\n</code></pre> </li> </ul>"},{"location":"doc-2/#union","title":"\u5143\u7ec4 Union","text":"<ul> <li> <p>\u4f7f\u7528 \u6a21\u5f0f\u5339\u914d \u89e3\u6784\u5143\u7ec4, \u652f\u6301 \u89e3\u6784\u5f0f\u8d4b\u503c.</p> <pre><code>// \u89e3\u6784: \u7528\u540c\u6837\u7684\u5f62\u5f0f\u5339\u914d\u51fa\u4e00\u4e2a\u590d\u6742\u5bf9\u8c61\u7684\u503c\nlet tup = (500, 6.4, 1);\nlet (x, y, z) = tup;\nprintln!(\"The value of y is: {}\", y);\n------------------------------------------------------\nlet (x, y, z);\n(y,z,x) = (1, 2, 3);\nassert_eq!(x, 3);\nassert_eq!(y, 1);\nassert_eq!(z, 2);\n</code></pre> </li> <li> <p>\u4f7f\u7528 <code>.</code> \u64cd\u4f5c\u7b26\u83b7\u53d6\u5143\u7ec4\u503c, \u4e0d\u901a\u8fc7 <code>[]</code> \u7d22\u5f15 (\u6570\u7ec4\u5143\u7d20\u7c7b\u578b\u4e00\u81f4, \u5b58\u50a8\u7a7a\u95f4\u5927\u5c0f\u4e00\u81f4, \u79fb\u52a8\u6307\u9488\u5bb9\u6613\u8ba1\u7b97; \u5143\u7ec4\u5404\u5143\u7d20\u7c7b\u578b\u4e0d\u4e00\u81f4).</p> <pre><code>// \u7d22\u5f15: \u53ea\u8bbf\u95ee\u67d0\u4e2a\u7279\u5b9a\u5143\u7d20\nlet x: (i32, f64, u8) = (500, 6.4, 1);\nlet five_hundred = x.0;\nlet six_point_four = x.1;\nlet one = x.2;\n</code></pre> </li> <li> <p>\u5143\u7ec4\u53ef\u4ee5\u4f5c\u4e3a \u51fd\u6570\u53c2\u6570\u6216\u8fd4\u56de\u503c.</p> <pre><code>fn main() {\nlet s1 = String::from(\"hello\");\nlet (s2, len) = calculate_length(s1); // \u6a21\u5f0f\u5339\u914d\nprintln!(\"The length of '{}' is {}.\", s2, len);\n}\nfn calculate_length(s: String) -&gt; (String, usize) {\n// \u63a5\u6536\u5b57\u7b26\u4e32\u6240\u6709\u6743, \u8ba1\u7b97\u957f\u5ea6, \u8fd4\u56de\u6240\u6709\u6743\u548c\u957f\u5ea6\nlet length = s.len();\n(s, length)\n}\n------------------------------------------------------\nfn main() {\nlet (x, y) = sum_multiply((2,3));\nassert_eq!(x, 5);\nassert_eq!(y, 6);\n}\nfn sum_multiply(nums: (i32, i32)) -&gt; (i32, i32) {\n(nums.0 + nums.1, nums.0 * nums.1)\n}\n</code></pre> </li> <li> <p>\u8fc7\u957f\u7684\u5143\u7ec4\u65e0\u6cd5\u4ee5 <code>Debug</code> \u6a21\u5f0f\u88ab\u6253\u5370\u8f93\u51fa (\u957f\u5ea6\u9650\u5236\u4e3a 12).</p> <pre><code>// let tuple = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\nlet tuple = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\nprintln!(\"long tuple: {:?}\", tuple);\n</code></pre> </li> </ul>"},{"location":"doc-3/","title":"\u7ed3\u6784\u4f53\u4e0e\u6a21\u5f0f\u5339\u914d","text":""},{"location":"doc-3/#struct","title":"\u7ed3\u6784\u4f53 Struct","text":"<ul> <li> <p>\u7ed3\u6784\u4f53\u8bed\u6cd5:</p> <ul> <li> <p>\u5b9a\u4e49\u7ed3\u6784\u4f53: \u5b57\u6bb5\u540d\u79f0\u4e0e\u7c7b\u578b, \u4e0d\u5141\u8bb8\u5c06\u67d0\u4e2a\u5b57\u6bb5\u4e13\u95e8\u6307\u5b9a\u4e3a\u53ef\u53d8\u7684.</p> <pre><code>#[derive(Debug)]\nstruct User {\nactive: bool,\nusername: String,\nemail: String,\nsign_in_count: u64,\n}\n</code></pre> </li> <li> <p>\u521b\u5efa\u7ed3\u6784\u4f53\u5b9e\u4f8b: \u6bcf\u4e2a\u5b57\u6bb5\u90fd\u9700\u8fdb\u884c\u521d\u59cb\u5316, \u987a\u5e8f\u4e0d\u9700\u8981\u548c\u5b9a\u4e49\u987a\u5e8f\u4e00\u81f4.</p> <pre><code>let user1 = User {\nemail: String::from(\"someone@example.com\"),\nusername: String::from(\"someusername123\"),\nactive: true,\nsign_in_count: 1,\n};\n</code></pre> </li> <li> <p>\u7f29\u7565\u8bed\u6cd5: \u51fd\u6570\u53c2\u6570\u548c\u7ed3\u6784\u4f53\u5b57\u6bb5\u540c\u540d \u65f6, \u4f7f\u7528\u7f29\u7565\u65b9\u5f0f\u8fdb\u884c\u521d\u59cb\u5316.</p> <pre><code>fn build_user(email: String, username: String) -&gt; User {\nUser {\nemail,\nusername,\nactive: true,\nsign_in_count: 1,\n}\n}\n</code></pre> </li> <li> <p>\u66f4\u65b0\u8bed\u6cd5: \u672a\u663e\u5f0f\u58f0\u660e\u7684\u5b57\u6bb5\u5168\u90e8\u81ea\u52a8\u83b7\u53d6, \u6240\u6709\u6743\u53d1\u751f \u90e8\u5206 <code>move</code>.</p> <pre><code>let user2 = User {\nemail: String::from(\"another@example.com\"), // \u8d4b\u503c\n..user1 // \u66f4\u65b0\u8bed\u6cd5\n};\nprintln!(\"{}\", user1.active);\n// println!(\"{:?}\", user1); Error!\n</code></pre> </li> </ul> </li> <li> <p>\u5143\u7ec4\u7ed3\u6784\u4f53 \u7684\u5b57\u6bb5\u53ef\u4ee5\u6ca1\u6709\u540d\u79f0.</p> <pre><code>struct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\nlet black = Color(0, 0, 0);\nlet origin = Point(0, 0, 0);\n</code></pre> </li> <li> <p>\u5143\u7ec4\u7ed3\u6784\u4f53 \u652f\u6301\u6a21\u5f0f\u5339\u914d, \u4f1a\u4ea7\u751f\u6240\u6709\u6743\u7684\u8f6c\u79fb (\u56de\u987e\u300c\u90e8\u5206 <code>move</code>\u300d, \u7ed3\u6784\u4f53\u548c\u5176\u5c5e\u6027 \u4e4b\u95f4\u5b58\u5728\u4e00\u79cd \u5206\u79bb\u7684\u6240\u6709\u6743\u5173\u7cfb).</p> <pre><code>struct Point(i32, i32, i32);\nfn main() {\nlet v = Point(0, 127, 255);\ncheck_color(v);\n}\n\nfn check_color(p: Point) { // `p` \u53d1\u751f `\u90e8\u5206 move`\nlet Point(x, _, _) = p;\nassert_eq!(x, 0);\nassert_eq!(p.1, 127);\nassert_eq!(p.2, 255);\n}\n</code></pre> </li> <li> <p>\u5355\u5143\u7ed3\u6784\u4f53 \u6ca1\u6709\u4efb\u4f55\u5b57\u6bb5\u548c\u5c5e\u6027, \u53ea\u5173\u5fc3\u5176\u884c\u4e3a.</p> <pre><code>struct AlwaysEqual;\nlet subject = AlwaysEqual;\n// \u4e3a AlwaysEqual \u5b9e\u73b0\u67d0\u4e2a\u7279\u5f81\nimpl SomeTrait for AlwaysEqual { }\n</code></pre> </li> <li> <p>\u7ed3\u6784\u4f53\u4e2d\u4f7f\u7528\u5f15\u7528 \u9700\u8981 \u52a0\u4e0a\u751f\u547d\u5468\u671f, \u786e\u4fdd\u7ed3\u6784\u4f53\u4f5c\u7528\u8303\u56f4\u5c0f\u4e8e\u501f\u7528\u6570\u636e\u7684\u4f5c\u7528\u8303\u56f4 (\u6216\u8005\u8ba9\u7ed3\u6784\u4f53\u62e5\u6709\u6570\u636e, \u800c\u4e0d\u662f\u501f\u7528).</p> <pre><code>struct User&lt;'a&gt; {\nusername: &amp;'a str,\nemail: &amp;'a str,\nsign_in_count: u64,\nactive: bool,\n}\nfn main() {\nlet user1 = User {\nemail: \"someone@example.com\",\nusername: \"someusername123\",\nactive: true,\nsign_in_count: 1,\n};\n}\n</code></pre> </li> </ul>"},{"location":"doc-3/#enum","title":"\u679a\u4e3e Enum","text":"<ul> <li> <p>\u679a\u4e3e\u7c7b\u578b\u53ef\u4f5c\u4e3a \u51fd\u6570\u53c2\u6570.</p> <pre><code>#[derive(Debug)]\nenum PokerSuit {\nClubs,\nSpades,\nDiamonds,\nHearts,\n}\nfn main() {\nlet heart = PokerSuit::Hearts;\nprint_suit(heart);\n}\nfn print_suit(card: PokerSuit) {\nprintln!(\"{:?}\",card);\n}\n</code></pre> </li> <li> <p>\u679a\u4e3e\u662f\u4e00\u4e2a \u7ed3\u6784\u4f53\u96c6\u5408, \u679a\u4e3e\u6210\u5458\u53ef \u5173\u8054\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\u4fe1\u606f.</p> <pre><code>enum Message {\nQuit,\nMove{x: i32, y: i32},\nWrite(String),\nChangeColor(i32, i32, i32),\n}\n\nfn main() {\nlet m1 = Message::Quit;\nlet m2 = Message::Move{x:1,y:1};\nlet m3 = Message::ChangeColor(255,255,0);\n}\n</code></pre> </li> <li> <p><code>Option</code> \u679a\u4e3e\u4f7f\u7528\u6cdb\u578b\u53c2\u6570 <code>T</code>, <code>None</code> \u8868\u793a\u65e0\u6709\u6548\u503c, \u5904\u7406\u503c\u4e3a\u7a7a\u7684\u60c5\u51b5.</p> <pre><code>enum Option&lt;T&gt; {\nSome(T),\nNone,\n}\nlet some_number = Some(5);\nlet some_string = Some(\"a string\");\nlet absent_number: Option&lt;i32&gt; = None;\n</code></pre> </li> <li> <p>\u4f7f\u7528 \u6a21\u5f0f\u5339\u914d\u89e3\u6784 \u679a\u4e3e\u7c7b.</p> <pre><code>let msg = Message::Move{x: 1, y: 2};\nif let Message::Move{x: a, y: b} = msg {\nassert_eq!(a, b);\n} else {\npanic!(\"\u4e0d\u8981\u8ba9\u8fd9\u884c\u4ee3\u7801\u8fd0\u884c!\");\n}\n------------------------------------------------------\nfn plus_one(x: Option&lt;i32&gt;) -&gt; Option&lt;i32&gt; {\nmatch x {\nNone =&gt; None,\nSome(i) =&gt; Some(i + 1),\n}\n}\n</code></pre> </li> <li> <p>\u4f7f\u7528 <code>as</code> \u5c06 \u679a\u4e3e\u503c\u5f3a\u8f6c\u4e3a\u6574\u6570\u7c7b\u578b.</p> <pre><code>enum Number {\nZero,\nOne,\nTwo,\n}\nfn main() {\nassert_eq!(Number::One as u8, 1u8);\n} </code></pre> </li> </ul>"},{"location":"doc-3/#array","title":"\u6570\u7ec4 Array","text":"<ul> <li> <p>\u8fde\u7eed\u5b58\u653e\u5143\u7d20, \u53ef\u4ee5\u901a\u8fc7 \u7d22\u5f15\u8bbf\u95ee; \u8d8a\u754c\u68c0\u67e5\u5728\u8fd0\u884c\u65f6\u8fdb\u884c.</p> <pre><code>let a = [9, 8, 7, 6, 5];\nlet first = a[0];\n// `get` \u8fd4\u56de `Option&lt;T&gt;` \u7c7b\u578b\nlet second = a.get(1).unwrap();\n</code></pre> </li> <li> <p>\u6570\u7ec4\u5143\u7d20\u4e3a\u975e\u57fa\u7840\u7c7b\u578b\u65f6, \u8c03\u7528 <code>std::array::from_fn</code> \u521b\u5efa\u5143\u7d20\u76f8\u540c\u7684\u6570\u7ec4.</p> <pre><code>let array: [String; 8] = std::array::from_fn(|_i| String::from(\"rust is good!\"));\nprintln!(\"{:#?}\", array);\n</code></pre> </li> <li> <p>\u6570\u7ec4\u904d\u5386 \u9700\u8981\u8003\u8651 \u6240\u6709\u6743\u7684\u8f6c\u79fb.</p> <pre><code>let one = [1, 2, 3];\nlet two = [4, 5, 6];\nlet arrays: [[u8; 3]; 2]  = [one, two];\nprintln!(\"{:p} {:?}\", &amp;arrays, arrays);\n\nfor t in &amp;arrays { // \u5f15\u7528\u501f\u7528 =&gt; \u4ee3\u4ef7\u4f4e\nprintln!(\"{:p} {:?}\", t, t);\nfor k in t {\nprintln!(\"{:p} {:?}\", k, k);\n}\n}\nfor t in arrays { // \u6570\u7ec4 Copy =&gt; \u6df1\u5ea6\u62f7\u8d1d, \u4ee3\u4ef7\u9ad8\nprintln!(\"{:p} {:?}\", &amp;t, t);\nfor k in t {\nprintln!(\"{:p} {:?}\", &amp;k, k);\n}\n}\nfor t in arrays.iter() { // \u8fed\u4ee3\u5668, \u548c (1) \u7b49\u4ef7 =&gt; \u4ee3\u4ef7\u4f4e\nprintln!(\"{:p} {:?}\", t, t);\nfor k in t {\nprintln!(\"{:p} {:?}\", k, k);\n}\n}\n</code></pre> </li> </ul>"},{"location":"doc-3/#control-flow","title":"\u6d41\u7a0b\u63a7\u5236 Control Flow","text":"<ul> <li> <p><code>if</code> \u8bed\u53e5\u5757\u662f\u8868\u8fbe\u5f0f, \u8d4b\u503c\u65f6\u4fdd\u8bc1\u6bcf\u4e2a\u5206\u652f\u8fd4\u56de\u7684\u7c7b\u578b\u4e00\u6837.</p> <pre><code>let n = 5;\nlet big_n =\nif n &lt; 10 &amp;&amp; n &gt; -10 {\nprintln!(\" \u6570\u5b57\u592a\u5c0f\uff0c\u5148\u589e\u52a0 10 \u500d\u518d\u8bf4\");\n10 * n\n} else {\nprintln!(\"\u6570\u5b57\u592a\u5927\uff0c\u6211\u4eec\u5f97\u8ba9\u5b83\u51cf\u534a\");\nn / 2\n};\nprintln!(\"{} -&gt; {}\", n, big_n);\n</code></pre> </li> <li> <p><code>for</code> \u5faa\u73af \u5f80\u5f80\u4f7f\u7528 \u96c6\u5408\u7684\u5f15\u7528\u5f62\u5f0f, \u5426\u5219\u6240\u6709\u6743\u4f1a \u53d1\u751f <code>move</code>; \u5b9e\u73b0\u4e86 <code>copy</code> \u7279\u5f81 \u7684\u96c6\u5408\u4f1a \u76f4\u63a5\u8fdb\u884c\u62f7\u8d1d, \u4e0d\u53d1\u751f\u6240\u6709\u6743\u8f6c\u79fb, \u5faa\u73af\u540e\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528; \u4e0d\u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u96c6\u5408, \u66f4\u5b89\u5168\u7b80\u6d01, \u907f\u514d\u8fd0\u884c\u65f6\u8fb9\u754c\u68c0\u67e5, \u6027\u80fd\u66f4\u9ad8.</p> </li> </ul> \u65b9\u5f0f \u7b49\u4ef7\u65b9\u5f0f \u6240\u6709\u6743 <code>for item in collection</code> <code>for item in IntoIterator::into_iter(collection)</code> \u8f6c\u79fb\u6240\u6709\u6743 <code>for item in &amp;collection</code> <code>for item in collection.iter()</code> \u4e0d\u53ef\u53d8\u501f\u7528 <code>for item in &amp;mut collection</code> <code>for item in collection.iter_mut()</code> \u53ef\u53d8\u501f\u7528 <pre><code>let a = [4, 3, 2, 1];\n// `.iter()` \u65b9\u6cd5\u628a `a` \u6570\u7ec4\u53d8\u6210\u4e00\u4e2a\u8fed\u4ee3\u5668.\n// `.enumerate()` \u65b9\u6cd5\u83b7\u53d6\u5143\u7d20\u7684\u7d22\u5f15.\nfor (i, v) in a.iter().enumerate() {\nprintln!(\"\u7b2c{}\u4e2a\u5143\u7d20\u662f{}\", i + 1, v);\n}\n</code></pre> <ul> <li> <p><code>continue</code> \u8bed\u53e5 \u8df3\u8fc7\u5f53\u524d\u5f53\u6b21\u7684\u5faa\u73af, \u5f00\u59cb\u4e0b\u6b21\u7684\u5faa\u73af.</p> </li> <li> <p><code>break</code> \u8bed\u53e5 \u53ef\u4ee5\u76f4\u63a5\u8df3\u51fa\u5f53\u524d\u6574\u4e2a\u5faa\u73af; \u53ef\u4ee5\u5e26\u8fd4\u56de\u503c, \u7c7b\u4f3c <code>return</code>.</p> <pre><code>for i in 1..5 {\nif i == 2 {\ncontinue;\n}\nif i == 4 {\nbreak i;\n}\nprintln!(\"{}\", i);\n}\n</code></pre> </li> <li> <p><code>while</code> \u8bed\u53e5 \u4e5f\u80fd\u7528\u6765\u5b9e\u73b0 <code>for</code> \u5faa\u73af \u7684\u529f\u80fd.</p> <pre><code>let mut n = 0;\nwhile n &lt;= 5  {\nprintln!(\"{}!\", n);\nn = n + 1;\n}\nprintln!(\"\u6211\u51fa\u6765\u4e86\uff01\");\n</code></pre> </li> <li> <p><code>loop</code> \u5faa\u73af \u9002\u7528\u9762\u6700\u9ad8, \u9002\u7528\u4e8e\u6240\u6709\u5faa\u73af\u573a\u666f, \u5728\u5185\u90e8\u901a\u8fc7 <code>break</code> \u5173\u952e\u5b57\u63a7\u5236\u5faa\u73af\u7ed3\u675f\u903b\u8f91; <code>loop</code> \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f, \u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u503c.</p> <pre><code>let mut counter = 0;\nlet result = loop {\ncounter += 1;\nif counter == 10 {\nbreak counter * 2;\n}\n};\nprintln!(\"The result is {}\", result);\n</code></pre> </li> <li> <p>\u591a\u5c42 <code>loop</code> \u5faa\u73af \u53ef\u4ee5\u4f7f\u7528 <code>continue</code> \u6216 <code>break</code> \u63a7\u5236\u5916\u5c42\u5faa\u73af, \u5916\u90e8\u5faa\u73af\u5fc5\u987b\u62e5\u6709\u4e00\u4e2a \u6807\u7b7e <code>'label</code>, \u5e76\u5728 <code>break</code> \u6216 <code>continue</code> \u65f6\u6307\u5b9a\u8be5\u6807\u7b7e.</p> <pre><code>let mut count = 0;\n'outer: loop {\n'inner1: loop {\nif count &gt;= 20 {\nbreak 'inner1; // \u8df3\u51fa inner1 \u5faa\u73af\n}\ncount += 2;\n}\ncount += 5;\n'inner2: loop {\nif count &gt;= 30 {\nbreak 'outer;\n}\ncontinue 'outer;\n}\n}\nassert!(count == 30)\n</code></pre> </li> </ul>"},{"location":"doc-3/#match-if-let","title":"<code>match</code> \u548c <code>if let</code>","text":"<ul> <li> <p><code>match</code> \u5339\u914d\u5c06 \u4e00\u4e2a\u503c \u4e0e \u4e00\u7cfb\u5217\u6a21\u5f0f \u76f8\u6bd4\u8f83, \u5fc5\u987b\u7a77\u4e3e\u6240\u6709\u53ef\u80fd; \u6bcf\u4e00\u4e2a\u5206\u652f\u90fd\u662f\u8868\u8fbe\u5f0f, \u8fd4\u56de\u503c\u7c7b\u578b\u5fc5\u987b\u76f8\u540c.</p> <pre><code>enum Direction {\nEast,\nWest,\nNorth,\nSouth,\n}\n\nfn main() {\nlet dire = Direction::South;\nmatch dire {\nDirection::East =&gt; println!(\"East\"),\nDirection::North | Direction::South =&gt; {\nprintln!(\"South or North\");\n},\n_ =&gt; println!(\"West\"),\n};\n}\n</code></pre> </li> <li> <p><code>match</code> \u662f\u4e00\u4e2a \u8868\u8fbe\u5f0f, \u53ef\u4ee5\u7528\u6765\u8d4b\u503c; \u4e5f\u53ef\u4ee5\u4ece\u6a21\u5f0f\u4e2d\u53d6\u51fa\u7ed1\u5b9a\u7684\u503c.</p> <pre><code>enum IpAddr {\nIpv4,\nIpv6\n}\nfn main() {\nlet ip1 = IpAddr::Ipv6;\nlet ip_str = match ip1 {\nIpAddr::Ipv4 =&gt; \"127.0.0.1\",\n_ =&gt; \"::1\",\n};\nprintln!(\"{}\", ip_str);\n}\n</code></pre> <pre><code>enum UsState {\nAlabama,\nAlaska,\n// --snip--\n}\nenum Coin {\nPenny,\nNickel,\nDime,\nQuarter(UsState),\n}\nfn main() {\nlet coin = Coin::Dime;\nlet value = match coin {\nCoin::Penny =&gt; 1,\nCoin::Nickel =&gt; 5,\nCoin::Dime =&gt; 10,\nCoin::Quarter(state) =&gt; {\nprintln!(\"State quarter from {:?}!\", state);\n25\n},\n}\n}\n</code></pre> </li> <li> <p><code>if let</code> \u53ea \u5339\u914d\u4e00\u4e2a\u6761\u4ef6, \u5ffd\u7565\u5176\u5b83\u6761\u4ef6.</p> <pre><code>match fields[1].parse::&lt;f32&gt;() {\nOk(length) =&gt; println!(\"{} cm\", length),\n_ =&gt; (),\n}\n------------------------------------------------------\n// \u6267\u884c\u6210\u529f\u4f1a\u8fd4\u56de `Ok(f32)` \u7c7b\u578b, \u6267\u884c\u5931\u8d25\u4f1a\u8fd4\u56de `Err(e)` \u7c7b\u578b.\nif let Ok(length) = fields[1].parse::&lt;f32&gt;() {\nprintln!(\"{} cm\", length);\n}\n</code></pre> </li> <li> <p><code>matches!</code> \u5b8f \u5c06\u4e00\u4e2a\u8868\u8fbe\u5f0f\u548c\u6a21\u5f0f\u8fdb\u884c\u5339\u914d, \u7136\u540e\u8fd4\u56de\u5339\u914d\u7684\u7ed3\u679c.</p> <pre><code>enum MyEnum {\nFoo,\nBar\n}\nfn main() {\nlet v = vec![MyEnum::Foo,MyEnum::Bar];\nlet foos = v.iter().filter(|x| matches!(x, MyEnum::Foo)).collect();\n}\n------------------------------------------------------\nlet bar = Some(4);\nassert!(matches!(bar, Some(x) if x &gt; 2));\n</code></pre> </li> <li> <p>\u5982\u679c\u6ca1\u6709 \u5b9e\u73b0 <code>Copy</code> \u7279\u5f81, \u5339\u914d\u6210\u529f\u4f1a \u8f6c\u79fb\u6240\u6709\u6743, \u4e0d\u6210\u529f\u5219\u4e0d\u8f6c\u79fb\u6240\u6709\u6743.</p> <pre><code>let item = Some(String::from(\"item\"));\nmatch item {\n// item \u4e0d\u662f Copy \u7684, \u5339\u914d\u6d88\u8017\u4e86 Option, \u83b7\u53d6\u91cc\u9762\u7684\u503c\nSome(it) =&gt; println!(\"{it}\"),\nNone =&gt; unreachable!(),\n}\n------------------------------------------------------\nlet item = Some(String::from(\"item\"));\nmatch item {\n// ref \u5f15\u7528 Option \u91cc\u7684\u503c, \u5e76\u6ca1\u6709\u6d88\u8017 item\nSome(ref it) =&gt; println!(\"{it}\"),\nNone =&gt; unreachable!(),\n}\n------------------------------------------------------\nlet item = Some(String::from(\"item\"));\nmatch &amp;item {\n// \u5f15\u7528 item, \u4e0d\u4f1a\u6d88\u8017\u6240\u6709\u6743\nSome(it) =&gt; println!(\"{it}\"),\nNone =&gt; unreachable!(),\n}\n------------------------------------------------------\nlet item = Some(\"item\");\nmatch item {\n// item \u662f Copy \u7684, match \u4f7f\u7528 item \u7684\u526f\u672c, item \u672a\u88ab\u6d88\u8017\nSome(it) =&gt; println!(\"{it}\"),\nNone =&gt; unreachable!(),\n}\n</code></pre> </li> <li> <p><code>Option&lt;T&gt;</code> \u5e38\u7528\u4f5c \u5904\u7406 <code>map</code> \u4e2d\u53ef\u80fd\u7684\u7a7a\u503c.</p> <pre><code>let x: Option&lt;i32&gt; = None;\nprintln!(\"{}\", x\n.map(|x| x + 1)\n.map(|x| x * 2)\n.expect(\"\u62a5\u9519\u4e86\uff0c\u4ed6\u662f\u7a7a\u7684\")\n)\n</code></pre> </li> </ul>"},{"location":"doc-3/#pattern-match","title":"\u6a21\u5f0f\u5339\u914d Pattern Match","text":"<ul> <li> <p><code>match</code> \u5206\u652f:</p> <pre><code>let x = 1;\n// \u5b57\u7b26\u548c\u6570\u5b57\u503c\u662f\u4ec5\u6709\u7684\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u7684\u7c7b\u578b\nmatch x {\n1 | 2 =&gt; println!(\"one or two\"),\n3..=7 =&gt; println!(\"three to seven\"),\n_ =&gt; println!(\"anything\"),\n}\n</code></pre> </li> <li> <p><code>if let</code> \u5206\u652f:</p> <pre><code>if let PATTERN = SOME_VALUE {\nSTATEMENT;\n}\n</code></pre> </li> <li> <p><code>while let</code> \u6761\u4ef6\u5faa\u73af:</p> <pre><code>let mut stack = Vec::new();\nstack.push(1);\nstack.push(2);\nstack.push(3);\nwhile let Some(top) = stack.pop() {\nprintln!(\"{}\", top);\n}\n------------------------------------------------------\n// `vec` \u7684\u7c7b\u578b\u662f `[Option]`\nlet vec = [Some(1), Some(2), Some(3), Some(4), None, Some(6)];\n// `.pop()` \u8fd4\u56de\u7684\u7c7b\u578b\u662f `Option&lt;Option&gt;`\nwhile let Some(tp) = vec.pop().unwrap() {\nprintln!(\"case success {:?}\", tp);\n}\n</code></pre> </li> <li> <p><code>for</code> \u5faa\u73af:</p> <pre><code>let v = vec!['a', 'b', 'c'];\nfor (index, value) in v.iter().enumerate() {\nprintln!(\"{} is at index {}\", value, index);\n}\n</code></pre> </li> <li> <p><code>let</code> \u8bed\u53e5:</p> <pre><code>// \u53d8\u91cf\u540d\u4e5f\u662f\u4e00\u79cd\u6a21\u5f0f\nlet x = 5;\n------------------------------------------------------\nlet (x, y, z) = (1, 2, 3);\n</code></pre> </li> <li> <p>\u51fd\u6570\u53c2\u6570:</p> <pre><code>fn print_coordinates(&amp;(x, y): &amp;(i32, i32)) {\nprintln!(\"Current location: ({}, {})\", x, y);\n}\nfn main() {\nlet point = (3, 5);\nprint_coordinates(&amp;point);\n}\n</code></pre> </li> <li> <p>\u4e0d\u53ef\u9a73\u6a21\u5f0f\u5339\u914d: <code>let</code>, <code>for</code> \u548c <code>match</code> \u8981\u6c42\u5b8c\u5168\u8986\u76d6\u5339\u914d\u624d\u80fd\u901a\u8fc7\u7f16\u8bd1.</p> </li> <li> <p>\u53ef\u9a73\u6a21\u5f0f\u5339\u914d: <code>if let</code> \u5141\u8bb8\u5339\u914d\u4e00\u79cd\u800c\u5ffd\u7565\u5176\u4f59\u7684\u6a21\u5f0f.</p> </li> <li> <p>\u4f7f\u7528 <code>|</code> \u5339\u914d\u591a\u4e2a\u503c, \u4f7f\u7528 <code>..=</code> \u5339\u914d\u4e00\u4e2a\u95ed\u533a\u95f4\u7684\u6570\u503c\u5e8f\u5217.</p> </li> <li> <p><code>@</code> \u8fd0\u7b97\u7b26 \u5c06\u4e00\u4e2a \u4e0e\u6a21\u5f0f\u76f8\u5339\u914d\u7684\u503c\u7ed1\u5b9a\u5230\u65b0\u7684\u53d8\u91cf\u4e0a.</p> <pre><code>enum Message {\nHello { id: i32 },\n}\nlet msg = Message::Hello { id: 5 };\nmatch msg {\nMessage::Hello { id: id_variable @ 3..=7 } =&gt; {\nprintln!(\"Found an id in range: {}\", id_variable)\n},\nMessage::Hello { id: 10..=12 } =&gt; {\nprintln!(\"Found an id in another range\")\n},\nMessage::Hello { id } =&gt; {\nprintln!(\"Found some other id: {}\", id)\n},\n}\n------------------------------------------------------\nstruct Point {\nx: i32,\ny: i32,\n}\nlet p = Point { x: 0, y: 10 };\nmatch p {\nPoint { x, y: 0 } =&gt; println!(\"x axis at {}\", x),\nPoint { x: 0..=5, y: y@ (10 | 20) } =&gt; {\nprintln!(\"y axis at {}\", y),\n}\nPoint { x, y } =&gt; println!(\"neither: ({}, {})\", x, y),\n}\n</code></pre> </li> </ul>"},{"location":"doc-4/","title":"\u6cdb\u578b\u4e0e\u7279\u5f81","text":""},{"location":"doc-4/#method","title":"\u65b9\u6cd5 Method","text":"<ul> <li> <p>\u4f7f\u7528 <code>impl</code> \u4e3a \u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u6216\u7279\u5f81 \u5b9a\u4e49\u65b9\u6cd5.</p> <pre><code>struct Circle {\nx: f64,\ny: f64,\nradius: f64,\n}\n\nimpl Circle {\n// new \u662f\u5173\u8054\u51fd\u6570, \u56e0\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e0d\u662fself, \u4e14 new \u4e0d\u662f\u5173\u952e\u5b57\n// \u5f80\u5f80\u7528\u4e8e\u521d\u59cb\u5316\u5f53\u524d\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\nfn new(x: f64, y: f64, radius: f64) -&gt; Circle {\nCircle {\nx: x,\ny: y,\nradius: radius,\n}\n}\n// area \u662f\u65b9\u6cd5, &amp;self \u8868\u793a\u501f\u7528\u5f53\u524d Circle \u7ed3\u6784\u4f53\nfn area(&amp;self) -&gt; f64 {\nstd::f64::consts::PI * (self.radius * self.radius)\n}\n}\n</code></pre> <pre><code>#[derive(Debug)]\nenum TrafficLightColor {\nRed,\nYellow,\nGreen,\n}\nimpl TrafficLightColor {\n// Rust \u652f\u6301\u81ea\u52a8\u5f15\u7528\u4e0e\u89e3\u5f15\u7528\nfn color(&amp;self) -&gt; String {\nmatch self {\nSelf::Red =&gt; \"red\".to_string(),\nSelf::Yellow =&gt; \"yellow\".to_string(),\nSelf::Green =&gt; \"green\".to_string(),\n}\n}\n}\n\nfn main() {\n// assert_eq! \u8c03\u7528\u7c7b\u578b\u7684 PartialEq \u7279\u5f81\n// String \u5b9e\u73b0\u4e86\u5bf9 str \u548c &amp;str \u7c7b\u578b\u7684 PartialEq \u7279\u5f81\nlet c = TrafficLightColor::Yellow;\nassert_eq!(c.color(), \"yellow\");\nprintln!(\"{:?}\",c);\n}\n</code></pre> </li> <li> <p><code>impl</code> \u5757\u5185, <code>Self</code> \u6307\u4ee3\u88ab\u5b9e\u73b0\u65b9\u6cd5\u7684 \u7ed3\u6784\u4f53\u7c7b\u578b, <code>self</code> \u6307\u4ee3\u6b64\u7c7b\u578b\u7684 \u5b9e\u4f8b.</p> <ul> <li><code>self</code> \u8868\u793a\u6240\u6709\u6743\u8f6c\u79fb\u5230\u8be5\u65b9\u6cd5\u4e2d.</li> <li><code>&amp;self</code> \u8868\u793a\u8be5\u65b9\u6cd5\u5bf9\u5b9e\u4f8b\u7684\u4e0d\u53ef\u53d8\u501f\u7528.</li> <li><code>&amp;mut self</code> \u8868\u793a\u53ef\u53d8\u501f\u7528.</li> </ul> <pre><code>#[derive(Debug)]\nstruct TrafficLight {\ncolor: String,\n}\n\nimpl TrafficLight {\npub fn new() -&gt; Self {\nSelf {\ncolor: \"red\".to_string()\n}\n}\npub fn get_state(&amp;self) -&gt; &amp;str {\n&amp;self.color\n}\n}\n\nfn main() {\nlet light = TrafficLight::new();\nassert_eq!(light.get_state(), \"red\");\n}\n</code></pre> </li> <li> <p>Rust \u652f\u6301 \u81ea\u52a8\u5f15\u7528\u548c\u89e3\u5f15\u7528, \u5f53\u4f7f\u7528 <code>object.something()</code> \u8c03\u7528\u65b9\u6cd5\u65f6, \u4f1a\u81ea\u52a8\u4e3a <code>object</code> \u6dfb\u52a0 <code>&amp;</code>, <code>&amp;mut</code> \u6216 <code>*</code> \u4ee5\u4fbf \u4e0e\u65b9\u6cd5\u7b7e\u540d\u5339\u914d:</p> <pre><code>// \u4e24\u79cd\u7b49\u4ef7\u5199\u6cd5\np1.distance(&amp;p2);\n(&amp;p1).distance(&amp;p2);\n</code></pre> <p>\u8fd9\u79cd\u81ea\u52a8\u5f15\u7528\u884c\u4e3a\u4e4b\u6240\u4ee5\u6709\u6548, \u662f\u56e0\u4e3a\u65b9\u6cd5\u6709\u4e00\u4e2a \u660e\u786e\u7684\u63a5\u6536\u8005 <code>self</code> \u7684\u7c7b\u578b.</p> </li> </ul>"},{"location":"doc-4/#generics","title":"\u6cdb\u578b Generics","text":"<ul> <li> <p>\u7279\u5f81 \u7684\u76ee\u7684\u662f\u8ba9 \u7c7b\u578b\u5b9e\u73b0\u76f8\u5e94\u7684\u529f\u80fd.</p> </li> <li> <p>\u51fd\u6570 \u4e2d\u4f7f\u7528\u6cdb\u578b:</p> <pre><code>fn add&lt;T: std::ops::Add&lt;Output = T&gt;&gt;(a:T, b:T) -&gt; T {\na + b\n}\n------------------------------------------------------\n// \u540e\u7f6e\u5f0f\u6cdb\u578b\u7279\u5f81, \u4f7f\u7528 where \u5173\u952e\u5b57\nfn add&lt;T&gt;(a:T, b:T) -&gt; T where T: std::ops::Add&lt;Output = T&gt; {\na + b\n}\n------------------------------------------------------\nfn largest&lt;T: PartialOrd + Copy&gt;(list: &amp;[T]) -&gt; T {\nlet mut largest = list[0];\nfor &amp;item in list.iter() {\nif item &gt; largest {\nlargest = item;\n}\n}\nlargest\n}\n------------------------------------------------------\nstruct A;                // \u5177\u4f53\u7684\u7c7b\u578b `A`.\nstruct S(A);             // \u5177\u4f53\u7684\u7c7b\u578b `S`.\nstruct SGen&lt;T&gt;(T);       // \u6cdb\u578b `SGen`.\nfn reg_fn(_s: S) {}\nfn gen_spec_t(_s: SGen&lt;A&gt;) {}\nfn gen_spec_i32(_s: SGen&lt;i32&gt;) {}\nfn generic&lt;T&gt;(_s: SGen&lt;T&gt;) {}\n\nfn main() {\n// \u975e\u6cdb\u578b\u51fd\u6570\nreg_fn(S(A));          // \u5177\u4f53\u7684\u7c7b\u578b\ngen_spec_t(SGen(A));   // \u9690\u5f0f\u5730\u6307\u5b9a\u7c7b\u578b\u53c2\u6570  `A`.\ngen_spec_i32(SGen(2)); // \u9690\u5f0f\u5730\u6307\u5b9a\u7c7b\u578b\u53c2\u6570`i32`.\n// \u663e\u5f0f\u6307\u5b9a\u7c7b\u578b\u53c2\u6570\ngeneric::&lt;char&gt;(SGen('a'));\n// \u9690\u5f0f\u6307\u5b9a\u7c7b\u578b\u53c2\u6570\ngeneric(SGen('a'));\n}\n</code></pre> </li> <li> <p>\u7ed3\u6784\u4f53 \u4e2d\u4f7f\u7528\u6cdb\u578b:</p> <pre><code>struct Point&lt;T,U&gt; {\nx: T,\ny: U,\n}\nfn main() {\nlet p = Point{x: 1, y :1.1};\n}\n</code></pre> </li> <li> <p>\u679a\u4e3e \u4e2d\u4f7f\u7528\u6cdb\u578b:</p> <pre><code>// \u5e38\u7528\u4e8e\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\nenum Option&lt;T&gt; {\nSome(T),\nNone,\n}\n------------------------------------------------------\nenum Result&lt;T, E&gt; {\nOk(T),\nErr(E),\n}\n</code></pre> </li> <li> <p>\u65b9\u6cd5 \u4e2d\u4f7f\u7528\u6cdb\u578b:</p> <pre><code>struct Point&lt;T&gt; {\nx: T,\ny: T,\n}\n// impl&lt;T&gt; \u662f\u6cdb\u578b\u58f0\u660e, Point&lt;T&gt; \u662f\u5b8c\u6574\u7684\u7ed3\u6784\u4f53\u7c7b\u578b\nimpl&lt;T&gt; Point&lt;T&gt; {\nfn x(&amp;self) -&gt; &amp;T {\n&amp;self.x\n}\n}\n// \u9488\u5bf9\u7279\u5b9a\u7684\u5177\u4f53\u7c7b\u578b\u8fdb\u884c\u65b9\u6cd5\u5b9a\u4e49\nimpl Point&lt;f32&gt; {\nfn distance_from_origin(&amp;self) -&gt; f32 {\n(self.x.powi(2) + self.y.powi(2)).sqrt()\n}\n}\nfn main() {\nlet p = Point { x: 5, y: 10 };\nprintln!(\"p.x = {}\", p.x());\n}\n------------------------------------------------------\nstruct Point&lt;T, U&gt; {\nx: T,\ny: U,\n}\n// \u65b9\u6cd5\u4e2d\u5b9a\u4e49\u989d\u5916\u7684\u6cdb\u578b\u53c2\u6570\nimpl&lt;T, U&gt; Point&lt;T, U&gt; {\nfn mixup&lt;V, W&gt;(self, other: Point&lt;V, W&gt;) -&gt; Point&lt;T, W&gt; {\nPoint {\nx: self.x,\ny: other.y,\n}\n}\n}\nfn main() {\nlet p1 = Point { x: 5, y: 10.4 };\nlet p2 = Point { x: \"Hello\", y: 'c'};\nlet p3 = p1.mixup(p2);\nprintln!(\"p3.x = {}, p3.y = {}\", p3.x, p3.y);\n}\n</code></pre> </li> <li> <p><code>const</code> \u6cdb\u578b \u662f \u9488\u5bf9\u503c\u7684\u6cdb\u578b, \u53ef\u4ee5\u7528\u4e8e\u5904\u7406\u6570\u7ec4\u957f\u5ea6\u7684\u95ee\u9898.</p> <pre><code>fn display&lt;T: std::fmt::Debug, const N: usize&gt;(arr: [T; N]) {\nprintln!(\"{:?}\", arr);\n}\nfn main() {\nlet arr: [i32; 3] = [1, 2, 3];\ndisplay(arr);\n\nlet arr: [i32; 2] = [1, 2];\ndisplay(arr);\n}\n</code></pre> </li> <li> <p><code>const</code> \u6cdb\u578b\u53c2\u6570 \u53ea\u80fd\u4f7f\u7528\u4ee5\u4e0b\u5f62\u5f0f\u7684 \u5b9e\u53c2:</p> <ul> <li>\u5355\u72ec\u7684 <code>const</code> \u6cdb\u578b\u53c2\u6570.</li> <li>\u5b57\u9762\u91cf.</li> <li><code>const</code> \u8868\u8fbe\u5f0f (\u4e0d\u542b\u6cdb\u578b\u53c2\u6570).</li> </ul> <pre><code>fn foo&lt;const N: usize&gt;() {}\n\nfn bar&lt;T, const M: usize&gt;() {\nfoo::&lt;M&gt;(); // ok: \u7b2c\u4e00\u79cd\nfoo::&lt;2021&gt;(); // ok: \u7b2c\u4e8c\u79cd\nfoo::&lt;{20 * 100 + 20 * 10 + 1}&gt;(); // ok: \u7b2c\u4e09\u79cd\n\nfoo::&lt;{ M + 1 }&gt;(); // error: \u8fdd\u80cc\u7b2c\u4e09\u79cd\nfoo::&lt;{ std::mem::size_of::&lt;T&gt;() }&gt;(); // error: \u8fdd\u80cc\u7b2c\u4e09\u79cd\n\nlet _: [u8; M]; // ok: \u7b2c\u4e00\u79cd\nlet _: [u8; std::mem::size_of::&lt;T&gt;()]; // error: \u8fdd\u80cc\u7b2c\u4e09\u79cd\n}\n</code></pre> </li> <li> <p><code>const</code> \u6cdb\u578b\u8868\u8fbe\u5f0f \u5728\u7f16\u8bd1\u65f6\u5c31\u80fd\u591f\u786e\u5b9a\u51fa\u7ed3\u679c, \u53ef\u4ee5 \u9650\u5236\u51fd\u6570\u53c2\u6570\u5360\u7528\u7684\u5185\u5b58\u5927\u5c0f.</p> <pre><code>// \u76ee\u524d\u53ea\u80fd\u5728 nightly \u7248\u672c\u4e0b\u4f7f\u7528\n#![allow(incomplete_features)]\n#![feature(generic_const_exprs)]\n\npub enum Assert&lt;const CHECK: bool&gt; {}\npub trait IsTrue {}\nimpl IsTrue for Assert&lt;true&gt; {}\n\nfn something&lt;T&gt;(val: T)\nwhere // \u8fd9\u91cc\u662f\u4e00\u4e2a const \u8868\u8fbe\u5f0f\nAssert&lt;{ core::mem::size_of::&lt;T&gt;() &lt; 768 }&gt;: IsTrue,\n{\n//\n}\n\nfn main() {\nsomething([0u8; 0]); // ok\nsomething([0u8; 512]); // ok\nsomething([0u8; 1024]); // \u7f16\u8bd1\u9519\u8bef, \u6570\u7ec4\u957f\u5ea6\u8d85\u8fc7\u53c2\u6570\u957f\u5ea6\u9650\u5236\n}\n</code></pre> </li> <li> <p>\u6cdb\u578b\u662f \u96f6\u6210\u672c\u7684\u62bd\u8c61, \u4f7f\u7528\u6cdb\u578b\u65f6 \u6ca1\u6709\u8fd0\u884c\u65f6\u5f00\u9500, \u83b7\u5f97\u4e86\u6027\u80fd\u4e0a\u7684\u5de8\u5927\u4f18\u52bf, \u4f46\u635f\u5931\u4e86 \u7f16\u8bd1\u901f\u5ea6 \u548c\u589e\u5927\u4e86 \u6700\u7ec8\u751f\u6210\u6587\u4ef6\u7684\u5927\u5c0f; \u7f16\u8bd1\u65f6\u8fdb\u884c\u6cdb\u578b\u4ee3\u7801\u7684 \u5355\u6001\u5316 \u6765\u4fdd\u8bc1\u6548\u7387.</p> </li> </ul>"},{"location":"doc-4/#trait","title":"\u7279\u5f81 Trait","text":"<ul> <li> <p>\u7279\u5f81\u5b9a\u4e49\u4e86 \u4e00\u7ec4\u88ab\u5171\u4eab\u7684\u884c\u4e3a, \u53ea\u8981\u5b9e\u73b0\u4e86\u7279\u5f81, \u5c31\u80fd\u4f7f\u7528\u8fd9\u7ec4\u884c\u4e3a; \u5b9a\u4e49\u7279\u5f81 \u662f\u628a\u4e00\u4e9b\u65b9\u6cd5\u7ec4\u5408\u5728\u4e00\u8d77, \u5b9a\u4e49\u4e00\u4e2a\u5b9e\u73b0\u67d0\u4e9b\u76ee\u6807 \u6240\u5fc5\u9700\u7684\u884c\u4e3a\u96c6\u5408.</p> </li> <li> <p>\u7279\u5f81\u53ea\u5b9a\u4e49\u884c\u4e3a \u770b\u8d77\u6765\u662f\u4ec0\u4e48\u6837, \u53ea \u5b9a\u4e49\u7279\u5f81\u65b9\u6cd5\u7b7e\u540d \u800c \u4e0d\u8fdb\u884c\u5b9e\u73b0; \u6bcf\u4e00\u4e2a\u5b9e\u73b0\u8fd9\u4e2a\u7279\u5f81\u7684\u7c7b\u578b\u90fd\u9700\u8981\u5177\u4f53\u5b9e\u73b0\u76f8\u5e94\u65b9\u6cd5.</p> <pre><code>pub trait Summary {\nfn summarize(&amp;self) -&gt; String;\n}\npub struct Post {\npub title: String,\npub author: String,\npub content: String,\n}\nimpl Summary for Post {\nfn summarize(&amp;self) -&gt; String {\nformat!(\"\u6587\u7ae0{}, \u4f5c\u8005\u662f{}\", self.title, self.author)\n}\n}\n------------------------------------------------------\nstruct Foo;\nstruct Bar;\n\n#[derive(PartialEq, Debug)]\nstruct BarFoo;\n\nimpl std::ops::Sub&lt;Foo&gt; for Bar {\ntype Output = BarFoo;\nfn sub(self, _rhs: Foo) -&gt; BarFoo {\nBarFoo\n}\n}\n</code></pre> </li> <li> <p>\u5b64\u513f\u89c4\u5219: \u4e3a\u7c7b\u578b <code>A</code> \u5b9e\u73b0\u7279\u5f81 <code>T</code>, \u90a3\u4e48 <code>A</code> \u6216\u8005 <code>T</code> \u81f3\u5c11\u6709\u4e00\u4e2a\u5728\u5f53\u524d\u4f5c\u7528\u57df\u4e2d\u5b9a\u4e49, \u786e\u4fdd\u5176\u5b83\u4eba\u7f16\u5199\u7684\u4ee3\u7801\u4e0d\u4f1a\u7834\u574f\u4f60\u7684\u4ee3\u7801.</p> </li> <li> <p>\u5728\u7279\u5f81\u4e2d\u5b9a\u4e49\u5177\u6709 \u9ed8\u8ba4\u5b9e\u73b0 \u7684\u65b9\u6cd5, \u5176\u5b83\u7c7b\u578b\u65e0\u9700\u5b9e\u73b0, \u4e5f\u53ef\u4ee5\u91cd\u8f7d\u8be5\u65b9\u6cd5; \u9ed8\u8ba4\u5b9e\u73b0 \u5141\u8bb8\u8c03\u7528\u76f8\u540c\u7279\u5f81\u4e2d\u7684\u5176\u4ed6\u65b9\u6cd5, \u54ea\u6015\u8fd9\u4e9b\u65b9\u6cd5\u6ca1\u6709\u9ed8\u8ba4\u5b9e\u73b0.</p> <pre><code>pub trait Summary {\nfn summarize_author(&amp;self) -&gt; String;\nfn summarize(&amp;self) -&gt; String {\nformat!(\"(Read more {}...)\", self.summarize_author())\n}\n}\n\nimpl Summary for Weibo {\nfn summarize_author(&amp;self) -&gt; String {\nformat!(\"@{}\", self.username)\n}\n}\n</code></pre> </li> <li> <p>\u7279\u5f81\u7ea6\u675f: \u7279\u5f81\u53ef\u4ee5\u4f5c\u4e3a \u51fd\u6570\u53c2\u6570, \u5728\u51fd\u6570\u4f53\u5185\u8c03\u7528\u8be5\u7279\u5f81\u7684\u65b9\u6cd5.</p> <pre><code>// \u7279\u5f81\u7ea6\u675f\nfn func(item: &amp;impl Summary) {}\n\nfn func&lt;T: Summary&gt;(item: &amp;T) {}\n------------------------------------------------------\n// \u591a\u91cd\u7ea6\u675f\nfn func(item: &amp;(impl Summary + Display)) {}\n\nfn func&lt;T: Summary + Display&gt;(item: &amp;T) {}\n------------------------------------------------------\n// Where \u7ea6\u675f\nfn func&lt;T: Display + Clone, U: Debug&gt;(t: &amp;T, u: &amp;U) -&gt; i32 {}\n\nfn func&lt;T, U&gt;(t: &amp;T, u: &amp;U) -&gt; i32\nwhere\nT: Display + Clone, U: Clone + Debug\n{}\n</code></pre> </li> <li> <p>\u7279\u5f81\u7ea6\u675f \u53ef\u4ee5\u5728 \u6307\u5b9a\u7c7b\u578b + \u6307\u5b9a\u7279\u5f81 \u7684\u6761\u4ef6\u4e0b\u53bb \u5b9e\u73b0\u65b9\u6cd5.</p> <pre><code>// `PartialOrd` trait \u4f9d\u8d56\u4e8e `PartialEq` trait\n#[derive(Debug, PartialEq, PartialOrd)]\nstruct Unit(i32);\n\nstruct Pair&lt;T&gt; {\nx: T,\ny: T,\n}\nimpl&lt;T: Debug + PartialOrd&gt; Pair&lt;T&gt; {\nfn cmp_display(&amp;self) {\nif self.x &gt;= self.y {\nprintln!(\"The largest member x = {:?}\", self.x);\n}\n}\n}\n\nfn main() {\nlet pair = Pair{ x: Unit(1), y: Unit(3) };\npair.cmp_display();\n}\n</code></pre> </li> <li> <p>\u7279\u5f81\u7ea6\u675f \u4e2d\u4f7f\u7528 <code>Fn</code> \u7279\u5f81 \u652f\u6301 \u63a5\u53d7\u95ed\u5305\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570.</p> <pre><code>struct Cacher&lt;T&gt;\nwhere T: Fn(u32) -&gt; u32,\n{\ncalculation: T,\nvalue: Option&lt;u32&gt;,\n}\n\nimpl&lt;T&gt; Cacher&lt;T&gt;\nwhere T: Fn(u32) -&gt; u32,\n{\nfn new(calculation: T) -&gt; Cacher&lt;T&gt; {\nCacher {\ncalculation,\nvalue: None,\n}\n}\n\nfn value(&amp;mut self, arg: u32) -&gt; u32 {\nmatch self.value {\nSome(v) =&gt; v,\nNone =&gt; {\nlet v = (self.calculation)(arg);\nself.value = Some(v);\nv\n},\n}\n}\n}\n\nlet mut cacher = Cacher::new(|x| x+1);\nassert_eq!(cacher.value(20), 21);\nassert_eq!(cacher.value(25), 21);\n</code></pre> </li> <li> <p>\u7279\u5f81 \u901a\u8fc7 <code>impl Trait</code> \u4f5c\u4e3a \u51fd\u6570\u8fd4\u56de\u503c, \u58f0\u660e \u8fd4\u56de\u7684\u7c7b\u578b\u5b9e\u73b0\u4e86\u67d0\u4e2a\u7279\u5f81; \u5f53\u51fd\u6570\u8fd4\u56de\u591a\u4e2a\u7c7b\u578b\u65f6, \u9700\u8981\u5f15\u5165 \u7279\u5f81\u5bf9\u8c61.</p> <pre><code>fn returns_summarizable() -&gt; impl Summary {\nWeibo {\nusername: String::from(\"sunface\"),\ncontent: String::from(\n\"m1 max\u592a\u5389\u5bb3\u4e86\uff0c\u7535\u8111\u518d\u4e5f\u4e0d\u4f1a\u5361\",\n)\n}\n}\n</code></pre> </li> <li> <p><code>derive</code> \u6d3e\u751f\u7279\u5f81 \u7684\u5bf9\u8c61 \u81ea\u52a8\u5b9e\u73b0\u5bf9\u5e94\u7684\u9ed8\u8ba4\u7279\u5f81\u4ee3\u7801, \u8fd8\u53ef\u4ee5\u624b\u52a8\u91cd\u8f7d\u5b9e\u73b0.</p> </li> <li> <p>\u8c03\u7528\u7279\u5f81\u65b9\u6cd5 \u9700\u8981\u5c06\u7279\u5f81 \u5f15\u5165\u5f53\u524d\u4f5c\u7528\u57df (\u8fd0\u7b97\u7b26 \u662f \u7279\u5f81\u65b9\u6cd5\u8c03\u7528 \u7684\u8bed\u6cd5\u7cd6).</p> <pre><code>use std::convert::TryInto;\n\nfn main() {\nlet a: i32 = 10;\nlet b: u16 = 100;\nlet c = b.try_into().unwrap();\nif a &lt; c {\nprintln!(\"Ten is less than one hundred.\");\n}\n}\n</code></pre> </li> </ul>"},{"location":"doc-4/#trait-object","title":"\u7279\u5f81\u5bf9\u8c61 Trait Object","text":"<ul> <li> <p>\u7279\u5f81\u5bf9\u8c61 \u6307\u5411 \u5b9e\u73b0\u4e86\u67d0\u7279\u5f81\u7684\u7c7b\u578b\u5b9e\u4f8b, \u8fd9\u79cd\u6620\u5c04\u5173\u7cfb \u5b58\u50a8\u5728\u4e00\u5f20\u8868\u4e2d, \u5728 \u8fd0\u884c\u65f6 \u901a\u8fc7\u7279\u5f81\u5bf9\u8c61 \u627e\u5230\u5177\u4f53\u8c03\u7528\u7684\u7c7b\u578b\u65b9\u6cd5.</p> </li> <li> <p>\u7279\u5f81\u5bf9\u8c61 \u5927\u5c0f\u4e0d\u56fa\u5b9a, \u4f46\u5176 \u5f15\u7528\u7c7b\u578b \u7531\u6307\u9488 <code>ptr</code> \u548c <code>vptr</code> \u7ec4\u6210, \u5927\u5c0f\u56fa\u5b9a.</p> </li> <li> <p>\u901a\u8fc7 <code>&amp;</code> \u5f15\u7528 \u6216\u8005 <code>Box&lt;T&gt;</code> \u667a\u80fd\u6307\u9488 \u7684\u65b9\u5f0f\u521b\u5efa\u7279\u5f81\u5bf9\u8c61; <code>dyn</code> \u5173\u952e\u5b57 \u53ea\u7528\u5728\u7279\u5f81\u5bf9\u8c61\u7684 \u7c7b\u578b\u58f0\u660e \u4e0a, \u5728\u521b\u5efa\u65f6\u65e0\u9700\u4f7f\u7528.</p> <pre><code>trait Draw {\nfn draw(&amp;self) -&gt; String;\n}\nimpl Draw for u8 {\nfn draw(&amp;self) -&gt; String {\nformat!(\"u8: {}\", *self)\n}\n}\nimpl Draw for f64 {\nfn draw(&amp;self) -&gt; String {\nformat!(\"f64: {}\", *self)\n}\n}\n\n// \u5b9e\u73b0 Draw \u7279\u5f81, \u4f20\u5165\u7684 Box&lt;T&gt; \u53ef\u9690\u5f0f\u8f6c\u6362\u6210 Box&lt;dyn Draw&gt;\n// \u5b9e\u73b0 Deref \u7279\u5f81, Box \u667a\u80fd\u6307\u9488\u4f1a\u81ea\u52a8\u89e3\u5f15\u7528\u4e3a\u5305\u88f9\u7684\u503c\nfn draw1(x: Box&lt;dyn Draw&gt;) {\nx.draw();\n}\nfn draw2(x: &amp;dyn Draw) {\nx.draw();\n}\n\nfn main() {\nlet x = 1.1f64;\nlet y = 8u8;\ndraw1(Box::new(x));\ndraw1(Box::new(y));\ndraw2(&amp;x);\ndraw2(&amp;y);\n}\n</code></pre> </li> <li> <p>\u7279\u5f81\u5bf9\u8c61 \u7684\u4f18\u52bf\u662f \u65e0\u9700\u5728\u8fd0\u884c\u65f6\u68c0\u67e5\u4e00\u4e2a\u503c\u662f\u5426\u5b9e\u73b0\u4e86\u7279\u5b9a\u65b9\u6cd5, \u5426\u5219\u4f1a \u4ea7\u751f\u7f16\u8bd1\u671f\u9519\u8bef.</p> </li> <li> <p>\u9759\u6001\u5206\u53d1 (static dispatch): \u6cdb\u578b\u662f\u5728 \u7f16\u8bd1\u671f\u5b8c\u6210\u5904\u7406, \u7f16\u8bd1\u5668\u4e3a\u6bcf\u4e2a\u6cdb\u578b\u53c2\u6570\u5bf9\u5e94\u7684\u5177\u4f53\u7c7b\u578b\u751f\u6210\u4e00\u4efd\u4ee3\u7801, \u5bf9\u4e8e \u8fd0\u884c\u671f\u6027\u80fd\u5b8c\u5168\u6ca1\u6709\u5f71\u54cd.</p> </li> <li> <p>\u52a8\u6001\u5206\u53d1 (dynamic dispatch): \u5173\u952e\u5b57 <code>dyn</code> \u5728 \u8fd0\u884c\u65f6\u786e\u5b9a \u9700\u8981\u8c03\u7528\u4ec0\u4e48\u65b9\u6cd5.</p> </li> <li> <p>\u7279\u5f81\u5bf9\u8c61\u7684\u5b89\u5168\u6027: \u65b9\u6cd5 \u8fd4\u56de\u7c7b\u578b\u4e0d\u80fd\u662f <code>Self</code>; \u65b9\u6cd5 \u6ca1\u6709\u6cdb\u578b\u53c2\u6570 (\u7279\u5f81\u5bf9\u8c61\u4e0d\u5173\u5fc3\u5b9e\u73b0\u8be5\u7279\u5f81\u7684\u5177\u4f53\u7c7b\u578b).</p> </li> </ul>"},{"location":"doc-4/#dive-into-trait","title":"\u6df1\u5165\u4e86\u89e3\u7279\u5f81 Dive into Trait","text":"<ul> <li> <p>\u5173\u8054\u7c7b\u578b \u662f\u5728\u7279\u5f81\u5b9a\u4e49\u7684\u8bed\u53e5\u5757\u4e2d\u7533\u660e\u7684 \u81ea\u5b9a\u4e49\u7c7b\u578b, \u53ef\u4ee5\u5728 \u7279\u5f81\u7684\u65b9\u6cd5\u7b7e\u540d\u4e2d \u4f7f\u7528\u8be5\u7c7b\u578b, \u76ee\u7684\u662f \u4ee3\u7801\u7684\u53ef\u8bfb\u6027 (\u6240\u4ee5 \u4e0d\u4f7f\u7528\u6cdb\u578b).</p> <pre><code>pub trait Iterator {\ntype Item;\n// \u901a\u8fc7 Self::type \u4f7f\u7528\u8be5\u7c7b\u578b\nfn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt;;\n}\n\nimpl Iterator for Counter {\ntype Item = u32;\nfn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n// --snip--\n}\n}\n\nfn main() {\nlet c = Counter{..}\nc.next()\n}\n------------------------------------------------------\ntrait Contains&lt;A, B&gt; {\nfn contains(&amp;self, _: &amp;A, _: &amp;B) -&gt; bool;\nfn first(&amp;self) -&gt; i32;\nfn last(&amp;self) -&gt; i32;\n}\n\nimpl Contains&lt;i32, i32&gt; for Container {\nfn contains(&amp;self, a: &amp;i32, b: &amp;i32) -&gt; bool {\n(&amp;self.0 == a) &amp;&amp; (&amp;self.1 == b)\n}\nfn first(&amp;self) -&gt; i32 { self.0 }\nfn last(&amp;self) -&gt; i32 { self.1 }\n}\n\nfn difference&lt;A, B, C: Contains&lt;A, B&gt;&gt;(container: &amp;C) -&gt; i32 {\ncontainer.last() - container.first()\n}\n------------------------------------------------------\ntrait Contains {\ntype A;\ntype B;\nfn contains(&amp;self, _: &amp;Self::A, _: &amp;Self::B) -&gt; bool;\nfn first(&amp;self) -&gt; i32;\nfn last(&amp;self) -&gt; i32;\n}\n\nimpl Contains for Container {\ntype A = i32;\ntype B = i32;\nfn contains(&amp;self, a: &amp;Self::A, b: &amp;Self::B) -&gt; bool {\n(&amp;self.0 == a) &amp;&amp; (&amp;self.1 == b)\n}\nfn first(&amp;self) -&gt; i32 { self.0 }\nfn last(&amp;self) -&gt; i32 { self.1 }\n}\n\nfn difference&lt;C: Contains&gt;(container: &amp;C) -&gt; i32 {\ncontainer.last() - container.first()\n}\n</code></pre> </li> <li> <p>\u7279\u5f81 \u4f7f\u7528\u6cdb\u578b\u7c7b\u578b\u53c2\u6570 \u65f6, \u53ef\u4ee5 \u6307\u5b9a\u4e00\u4e2a\u9ed8\u8ba4\u7684\u5177\u4f53\u7c7b\u578b.</p> <pre><code>trait Add&lt;RHS=Self&gt; {\ntype Output;\nfn add(self, rhs: RHS) -&gt; Self::Output;\n}\n------------------------------------------------------\n#[derive(Debug, PartialEq)]\nstruct Point {\nx: i32,\ny: i32,\n}\n\nimpl Add for Point {\ntype Output = Point;\nfn add(self, other: Point) -&gt; Point {\nPoint {\nx: self.x + other.x,\ny: self.y + other.y,\n}\n}\n}\n------------------------------------------------------\nstruct Millimeters(u32);\nstruct Meters(u32);\n\nimpl Add&lt;Meters&gt; for Millimeters {\ntype Output = Millimeters;\nfn add(self, other: Meters) -&gt; Millimeters {\nMillimeters(self.0 + (other.0 * 1000))\n}\n}\n</code></pre> </li> <li> <p>\u7c7b\u578b\u548c\u7279\u5f81 \u5b9a\u4e49\u4e86 \u540c\u540d\u65b9\u6cd5 \u65f6, \u7f16\u8bd1\u5668 \u9ed8\u8ba4\u8c03\u7528\u7c7b\u578b\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5, \u8c03\u7528\u7279\u5f81\u7684\u65b9\u6cd5 \u9700\u8981\u4f7f\u7528 \u663e\u5f0f\u8c03\u7528\u8bed\u6cd5.</p> <pre><code>let person = Human;\nperson.fly(); // \u8c03\u7528 Human \u7c7b\u578b\u81ea\u8eab\u7684\u65b9\u6cd5\nPilot::fly(&amp;person); // \u8c03\u7528 Pilot \u7279\u5f81\u4e0a\u7684\u65b9\u6cd5\nWizard::fly(&amp;person); // \u8c03\u7528 Wizard \u7279\u5f81\u4e0a\u7684\u65b9\u6cd5\n</code></pre> </li> <li> <p>\u65b9\u6cd5\u6ca1\u6709 <code>self</code> \u53c2\u6570 (\u5173\u8054\u51fd\u6570) \u65f6, \u9700\u8981\u4f7f\u7528 \u5b8c\u5168\u9650\u5b9a\u8bed\u6cd5 <code>&lt;Type as Trait&gt;::function(receiver_if_method, next_arg, ...)</code>.</p> <pre><code>Dog::baby_name(); // \u8c03\u7528 Dog \u7c7b\u578b\u81ea\u8eab\u7684\u65b9\u6cd5\n&lt;Dog as Animal&gt;::baby_name(); // \u8c03\u7528 Animal \u7279\u5f81\u4e0a\u7684\u65b9\u6cd5\n</code></pre> </li> <li> <p><code>supertrait</code>: \u9700\u8981\u8ba9\u7279\u5f81 A \u4f7f\u7528\u7279\u5f81 B \u7684\u529f\u80fd (\u53e6\u4e00\u79cd\u5f62\u5f0f\u7684 \u7279\u5f81\u7ea6\u675f), \u8981 \u4e3a\u7c7b\u578b\u5b9e\u73b0\u7279\u5f81 A \u548c\u7279\u5f81 B.</p> <pre><code>use std::fmt::Display;\n\ntrait OutlinePrint: Display {\nfn outline_print(&amp;self) {\nlet output = self.to_string();\nlet len = output.len();\nprintln!(\"{}\", \"*\".repeat(len + 4));\nprintln!(\"*{}*\", \" \".repeat(len + 2));\nprintln!(\"* {} *\", output);\nprintln!(\"*{}*\", \" \".repeat(len + 2));\nprintln!(\"{}\", \"*\".repeat(len + 4));\n}\n}\n</code></pre> </li> <li> <p><code>newtype</code> \u6a21\u5f0f: \u7ed5\u8fc7 \u5b64\u513f\u89c4\u5219, \u521b\u5efa\u4e00\u4e2a \u5143\u7ec4\u7ed3\u6784\u4f53 \u65b0\u7c7b\u578b, \u8be5\u7ed3\u6784\u4f53 \u5c01\u88c5\u4e86\u5e0c\u671b\u5b9e\u73b0\u7279\u5f81\u7684\u5177\u4f53\u7c7b\u578b, \u76f8\u5f53\u4e8e \u4e00\u5c42\u88c5\u9970\u5668.</p> <pre><code>// \u4e3a Vec&lt;T&gt; \u5b9e\u73b0 Display \u7279\u5f81\n// \u6ca1\u6709\u4ec0\u4e48\u662f\u52a0\u4e00\u5c42\u89e3\u51b3\u4e0d\u4e86\u7684, \u5982\u679c\u4e0d\u884c\u90a3\u5c31\u518d\u52a0\u4e00\u5c42\nstruct Wrapper(Vec&lt;String&gt;);\n\nimpl Display for Wrapper {\nfn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\nwrite!(f, \"[{}]\", self.0.join(\", \"))\n}\n}\n\nimpl Deref for Wrapper {\ntype Target = Vec;\nfn deref(&amp;self) -&gt; &amp;Self::Target {\n&amp;self.0\n}\n}\n\nfn main() {\nlet w = Wrapper(vec![1, 2, 3, 4, 5]);\nprintln!(\"w = {}\", w);\n}\n</code></pre> </li> </ul>"},{"location":"doc-5/","title":"\u96c6\u5408\u7c7b\u578b\u4e0e\u751f\u547d\u5468\u671f","text":""},{"location":"doc-5/#vector","title":"\u52a8\u6001\u6570\u7ec4 Vector","text":"<ul> <li> <p>\u521b\u5efa\u52a8\u6001\u6570\u7ec4 \u53ef\u4ee5\u4f7f\u7528\u5173\u8054\u65b9\u6cd5 <code>Vec::new()</code>, <code>Vec::with_capacity()</code> \u6216\u5b8f <code>vec!</code>.</p> </li> <li> <p>\u5411\u52a8\u6001\u6570\u7ec4\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 \u53ef\u4ee5\u4f7f\u7528 <code>push</code> \u65b9\u6cd5.</p> <pre><code>let mut v = Vec::new();\nv.push(1);\n\nlet mut v = Vec::with_capacity(20);\n\nlet mut v = vec![1, 2, 3];\n</code></pre> </li> <li> <p>\u4ece\u52a8\u6001\u6570\u7ec4\u4e2d\u8bfb\u53d6\u5143\u7d20 \u53ef\u4ee5\u4f7f\u7528\u4e0b\u6807\u7d22\u5f15\u8bbf\u95ee\u6216 <code>get</code> \u65b9\u6cd5.</p> <pre><code>let v = vec![1, 2, 3, 4, 5];\n// \u9632\u6b62\u8d8a\u754c\u8bbf\u95ee, \u8fd4\u56de Option&lt;&amp;T&gt;\nmatch v.get(2) {\nSome(third) =&gt; println!(\"\u7b2c\u4e09\u4e2a\u5143\u7d20\u662f {third}\"),\nNone =&gt; println!(\"\u53bb\u4f60\u7684\u7b2c\u4e09\u4e2a\u5143\u7d20\"),\n}\n</code></pre> </li> <li> <p>\u501f\u7528\u52a8\u6001\u6570\u7ec4\u5143\u7d20 \u65f6\u4e0d\u80fd \u8fdb\u884c\u5143\u7d20\u63d2\u5165, \u5426\u5219\u5f53 \u65e7\u6570\u7ec4\u5927\u5c0f\u4e0d\u591f \u65f6, \u4f1a \u91cd\u65b0\u5206\u914d \u4e00\u5757\u66f4\u5927\u7684\u5185\u5b58\u7a7a\u95f4, \u4e4b\u524d\u7684\u5f15\u7528\u4f1a \u6307\u5411\u4e00\u5757\u65e0\u6548\u5185\u5b58.</p> <pre><code>let mut v = vec![1, 2, 3, 4, 5];\nlet first = &amp;v[0];\nv.push(6);\n// println!(\"The first element is: {first}\"); ERROR!\n</code></pre> </li> <li> <p>\u52a8\u6001\u6570\u7ec4\u7684\u5e38\u7528\u65b9\u6cd5 \u5982\u4e0b.</p> <pre><code>let mut v = Vec::with_capacity(10);\nv.extend([1, 2, 3]); // \u9644\u52a0\u6570\u636e\nprintln!(\"\u957f\u5ea6:{}, \u5bb9\u91cf:{}\", v.len(), v.capacity());\nv.reserve(100); // \u8c03\u6574\u5bb9\u91cf\nv.shrink_to_fit(); // \u91ca\u653e\u5269\u4f59\u5bb9\u91cf\n------------------------------------------------------\nlet mut v =  vec![1, 2];\nassert!(!v.is_empty()); // \u68c0\u67e5\u662f\u5426\u4e3a\u7a7a\nv.insert(2, 3); // \u6307\u5b9a\u7d22\u5f15\u63d2\u5165\u6570\u636e\nassert_eq!(v.remove(1), 2); // \u79fb\u9664\u6307\u5b9a\u4f4d\u7f6e\u5143\u7d20\u5e76\u8fd4\u56de\nassert_eq!(v.pop(), Some(3)); // \u5220\u9664\u5e76\u8fd4\u56de\u5c3e\u90e8\u5143\u7d20\nassert_eq!(v.pop(), Some(1)); assert_eq!(v.pop(), None);\nv.clear(); // \u6e05\u7a7a\n\nlet mut v1 = [11, 22].to_vec();\nv.append(&amp;mut v1); // \u6e05\u7a7a v1, \u6240\u6709\u5143\u7d20\u9644\u52a0\u5230 v \u4e2d\nv.truncate(1); // \u622a\u65ad\u5230\u6307\u5b9a\u957f\u5ea6\nv.retain(|x| *x &gt; 10); // \u4fdd\u7559\u6ee1\u8db3\u6761\u4ef6\u5143\u7d20\n------------------------------------------------------\nlet mut v = vec![11, 22, 33, 44, 55];\n// \u5220\u9664\u6307\u5b9a\u8303\u56f4\u7684\u5143\u7d20, \u83b7\u53d6\u88ab\u5220\u9664\u5143\u7d20\u7684\u8fed\u4ee3\u5668\nlet mut m: Vec&lt;_&gt; = v.drain(1..=3).collect();    let v1 = m.split_off(1); // \u6307\u5b9a\u7d22\u5f15\u5904\u5207\u5206\n</code></pre> </li> <li> <p>\u52a8\u6001\u6570\u7ec4\u6392\u5e8f\u7b97\u6cd5 \u5206\u4e3a\u7a33\u5b9a\u6392\u5e8f <code>sort</code> \u548c <code>sort_by</code>, \u4ee5\u53ca\u975e\u7a33\u5b9a\u6392\u5e8f <code>sort_unstable</code> \u548c <code>sort_unstable_by</code>.</p> <pre><code>let mut vec = vec![1, 5, 10, 2, 15];\nvec.sort_unstable();\n------------------------------------------------------\nlet mut vec = vec![1.0, 5.6, 10.3, 2.0, 15f32];    vec.sort_unstable_by(|a, b| a.partial_cmp(b).unwrap());\n</code></pre> </li> <li> <p>\u6d6e\u70b9\u6570 \u4e2d\u5b58\u5728 <code>NAN</code>, \u6ca1\u6709\u5b9e\u73b0 \u5168\u53ef\u6bd4\u8f83\u7279\u6027 <code>Ord</code>, \u800c\u5b9e\u73b0\u4e86 \u90e8\u5206\u53ef\u6bd4\u8f83\u7279\u6027 <code>PartialOrd</code>; \u5b9e\u73b0 <code>Ord</code> \u7279\u6027 \u9700\u8981\u5b9e\u73b0 <code>Ord</code>, <code>Eq</code>, <code>PartialEq</code>, <code>PartialOrd</code>.</p> </li> <li> <p>\u4e3a\u52a8\u6001\u6570\u7ec4 \u5b9e\u73b0 <code>From&lt;T&gt;</code> \u7279\u5f81, \u90a3\u4e48 <code>T</code> \u5c31\u53ef\u4ee5\u88ab \u8f6c\u6362\u6210 <code>Vec</code>.</p> <pre><code>// impl From&lt;[T; N]&gt; for Vec\nlet arr = [1, 2, 3];\nlet v1 = Vec::from(arr);\nlet v2: Vec&lt;i32&gt; = arr.to_vec();\nassert_eq!(v1, v2);\n------------------------------------------------------\n// impl From&lt;String&gt; for Vec\nlet s = \"hello\".to_string();\nlet v1: Vec&lt;u8&gt; = s.into();\n\nlet s = \"hello\".to_string();\nlet v2 = s.into_bytes();\nassert_eq!(v1, v2);\n------------------------------------------------------\n// impl&lt;'_&gt; From&lt;&amp;'_ str&gt; for Vec\nlet s = \"hello\";\nlet v3 = Vec::from(s);\nassert_eq!(v2, v3);\n------------------------------------------------------\n// Iterators \u53ef\u4ee5\u901a\u8fc7 collect \u53d8\u6210 Vec\nlet v4: Vec&lt;i32&gt; = [0; 10].into_iter().collect();\nassert_eq!(v4, vec![0; 10]);\n</code></pre> </li> <li> <p><code>&amp;[T]</code> \u5207\u7247\u548c <code>&amp;Vec&lt;T&gt;</code> \u662f\u4e0d\u540c\u7684\u7c7b\u578b, \u540e\u8005\u4ec5\u4ec5\u662f <code>Vec</code> \u7684\u5f15\u7528 \u5e76\u53ef\u4ee5\u901a\u8fc7 \u89e3\u5f15\u7528\u76f4\u63a5\u83b7\u53d6 <code>Vec</code>.</p> </li> </ul>"},{"location":"doc-5/#hashmap","title":"\u54c8\u5e0c\u6620\u5c04 HashMap","text":"<ul> <li> <p>\u521b\u5efa HashMap \u53ef\u4f7f\u7528\u5173\u8054\u65b9\u6cd5 <code>HashMap::new()</code>, <code>HashMap::from()</code>, <code>HashMap::with_capacity()</code> \u6216 <code>collect</code> \u65b9\u6cd5.</p> <pre><code>use std::collections::HashMap;\nlet mut my_gems = HashMap::new();\nmy_gems.insert(\"\u7ea2\u5b9d\u77f3\", 1);\nmy_gems.insert(\"\u6cb3\u8fb9\u6361\u7684\u8bef\u4ee5\u4e3a\u662f\u5b9d\u77f3\u7684\u7834\u77f3\u5934\", 18);\n------------------------------------------------------\nlet teams = [\n(\"Chinese Team\", 100),\n(\"American Team\", 10),\n(\"France Team\", 50),\n];\n// collect \u65b9\u6cd5\u5728\u5185\u90e8\u652f\u6301\u591a\u79cd\u7c7b\u578b\u7684\u76ee\u6807\u96c6\u5408, \u9700\u8981\u8fdb\u884c\u7c7b\u578b\u6807\u6ce8\nlet map1: HashMap&lt;_,_&gt; = team_list.into_iter().collect();\n\nlet mut map2 = HashMap::new();\nfor team in &amp;teams {\nmap2.insert(team.0, team.1);\n}\n\nlet map3 = HashMap::from(teams);\n</code></pre> </li> <li> <p>\u96c6\u5408\u7c7b\u578b \u90fd\u662f \u52a8\u6001\u3001\u6ca1\u6709\u56fa\u5b9a\u7684\u5185\u5b58\u5927\u5c0f \u7684, \u5e95\u5c42\u6570\u636e \u5b58\u50a8\u5728\u5806\u4e0a, \u901a\u8fc7 \u5b58\u50a8\u5728\u6808\u4e2d\u7684\u5f15\u7528\u7c7b\u578b \u6765\u8bbf\u95ee.</p> </li> <li> <p><code>HashMap</code> \u7684\u6240\u6709\u6743\u89c4\u5219:</p> <ul> <li>\u5b9e\u73b0 <code>Copy</code> \u7279\u5f81 (\u5982 <code>&amp;str</code>), \u590d\u5236\u8fdb <code>HashMap</code>, \u6240\u6709\u6743\u4e0d\u53d1\u751f\u8f6c\u79fb;</li> <li>\u672a\u5b9e\u73b0 <code>Copy</code> \u7279\u5f81 (\u5982 <code>String</code>), \u6240\u6709\u6743\u8f6c\u79fb\u7ed9 <code>HashMap</code> \u4e2d.</li> </ul> </li> <li> <p>\u5f15\u7528\u7c7b\u578b \u653e\u5165 HashMap \u4e2d, \u9700\u8981\u786e\u4fdd\u8be5\u5f15\u7528\u7684 \u751f\u547d\u5468\u671f\u81f3\u5c11\u4e00\u6837\u4e45.</p> <pre><code>let name = String::from(\"Sunface\");\nlet mut handsome_boys = HashMap::new();\nhandsome_boys.insert(&amp;name, 18);\nstd::mem::drop(name);\n// println!(\"{:?}\u5df2\u7ecf\u88ab\u9664\u540d\", handsome_boys); ERROR!\n</code></pre> </li> <li> <p>\u4ece HashMap \u8bfb\u53d6\u5143\u7d20 \u4f7f\u7528 <code>get</code> \u65b9\u6cd5, \u8fd4\u56de <code>Option&lt;&amp;T&gt;</code>; \u6216\u4f7f\u7528\u4e0b\u6807\u7d22\u5f15.</p> <pre><code>let mut scores = HashMap::new();\nscores.insert(String::from(\"Blue\"), 10);\nscores.insert(String::from(\"Yellow\"), 50);\n\nlet name = String::from(\"Blue\");\nlet score: Option&lt;&amp;i32&gt; = scores.get(&amp;name);\nlet score_: i32 = scores.get(&amp;name).copied().unwrap_or(0);\n</code></pre> </li> <li> <p>\u4ece HashMap \u4e2d\u5faa\u73af\u904d\u5386 <code>Key</code>, <code>Value</code> \u5bf9.</p> <pre><code>use std::collections::HashMap;\n\nlet mut scores = HashMap::new();\nscores.insert(String::from(\"Blue\"), 10);\nscores.insert(String::from(\"Yellow\"), 50);\nfor (key, value) in &amp;scores {\nprintln!(\"{}: {}\", key, value);\n}\n</code></pre> </li> <li> <p>\u66f4\u65b0 HashMap \u7684\u65b9\u6cd5\u5982\u4e0b.</p> <pre><code>let mut scores = HashMap::new();\nscores.insert(\"Blue\", 10);\n\n// \u8986\u76d6\u5df2\u6709\u7684\u503c\nlet old = scores.insert(\"Blue\", 20);\nassert_eq!(old, Some(10));\n\n// \u67e5\u8be2\u65b0\u63d2\u5165\u7684\u503c\nlet new = scores.get(\"Blue\");\nassert_eq!(new, Some(&amp;20));\n\n// \u67e5\u8be2\u5bf9\u5e94\u7684\u503c, \u82e5\u4e0d\u5b58\u5728\u5219\u63d2\u5165\u65b0\u503c\n// or_insert \u8fd4\u56de &amp;mut v \u5f15\u7528\nlet v = scores.entry(\"Yellow\").or_insert(5);\nassert_eq!(*v, 5);\nlet v = scores.entry(\"Yellow\").or_insert(50);\nassert_eq!(*v, 5);\n</code></pre> </li> <li> <p>\u7c7b\u578b\u4f5c\u4e3a <code>Key</code> \u7684\u5173\u952e\u662f \u80fd\u5426\u8fdb\u884c\u76f8\u7b49\u6bd4\u8f83 (\u5b9e\u73b0 <code>std::cmp::Eq</code> \u7279\u5f81).</p> <ul> <li>\u6d6e\u70b9\u6570 \u4e0d\u53ef\u4ee5\u7528\u4f5c <code>HashMap</code> \u7684 <code>Key</code>.</li> <li>\u7ed3\u6784\u4f53 \u4f5c\u4e3a <code>HashMap</code> \u7684 <code>Key</code> \u9700\u8981\u5b9e\u73b0 <code>PartialEq</code>, <code>Eq</code>, <code>Hash</code> \u7279\u5f81.</li> </ul> </li> </ul>"},{"location":"doc-5/#lifetime","title":"\u751f\u547d\u5468\u671f Lifetime","text":"<ul> <li> <p>\u751f\u547d\u5468\u671f \u5c31\u662f \u5f15\u7528\u7684\u6709\u6548\u4f5c\u7528\u57df, \u4e3b\u8981\u4f5c\u7528\u662f \u907f\u514d\u60ac\u5782\u5f15\u7528.</p> </li> <li> <p>Rust \u4f7f\u7528 \u501f\u7528\u68c0\u67e5\u5668 \u6765\u68c0\u67e5 \u501f\u7528\u6b63\u786e\u6027.</p> <pre><code>{\nlet r;                // ---------+-- 'a\n{                     //          |\nlet x = 5;        // -+-- 'b  |\nr = &amp;x;           //  |       |\n}                     // -+       |\nprintln!(\"r: {}\", r); //          |\n}                         // ---------+\n</code></pre> </li> <li> <p>\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a\u5f15\u7528\u65f6, \u7f16\u8bd1\u5668\u9700\u8981\u77e5\u9053 \u5f15\u7528\u7684\u5177\u4f53\u5bf9\u8c61, \u786e\u4fdd \u8c03\u7528\u540e\u7684\u5f15\u7528\u751f\u547d\u5468\u671f\u5206\u6790; \u751f\u547d\u5468\u671f \u6807\u6ce8 \u5e76 \u4e0d\u4f1a\u6539\u53d8\u5f15\u7528\u7684\u5b9e\u9645\u4f5c\u7528\u57df.</p> <pre><code>&amp;i32         // \u4e00\u4e2a\u5f15\u7528\n&amp;'a i32      // \u5177\u6709\u663e\u5f0f\u751f\u547d\u5468\u671f\u7684\u5f15\u7528\n&amp;'a mut i32  // \u5177\u6709\u663e\u5f0f\u751f\u547d\u5468\u671f\u7684\u53ef\u53d8\u5f15\u7528\n</code></pre> </li> <li> <p>\u901a\u8fc7 \u51fd\u6570\u7b7e\u540d \u6307\u5b9a \u751f\u547d\u5468\u671f\u53c2\u6570 \u65f6, \u5e76 \u6ca1\u6709\u6539\u53d8 \u4f20\u5165\u5f15\u7528\u6216\u8005\u8fd4\u56de\u5f15\u7528\u7684 \u771f\u5b9e\u751f\u547d\u5468\u671f, \u800c\u662f\u544a\u8bc9 \u7f16\u8bd1\u5668 \u5f53\u4e0d\u6ee1\u8db3\u7ea6\u675f\u6761\u4ef6\u65f6 \u62d2\u7edd\u7f16\u8bd1\u901a\u8fc7.</p> <pre><code>// \u751f\u547d\u5468\u671f\u6807\u6ce8\u8bf4\u660e\u53c2\u6570\u548c\u8fd4\u56de\u503c\u81f3\u5c11\u548c 'a \u6d3b\u5f97\u4e00\u6837\u4e45\n// \u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\u662f\u53c2\u6570\u4e2d\u4f5c\u7528\u57df\u8f83\u5c0f\u7684\u90a3\u4e2a\nfn longest&lt;'a&gt;(x: &amp;'a str, y: &amp;'a str) -&gt; &amp;'a str {\nif x.len() &gt; y.len() {\nx\n} else {\ny\n}\n}\n</code></pre> </li> <li> <p>\u5982\u679c\u51fd\u6570 \u8fd4\u56de\u5f15\u7528\u7c7b\u578b, \u5176\u751f\u547d\u5468\u671f\u6765\u6e90\u4e8e \u53c2\u6570 \u6216 \u51fd\u6570\u4f53\u4e2d\u67d0\u65b0\u5efa\u5f15\u7528(\u60ac\u5782).</p> </li> <li> <p>\u7ed3\u6784\u4f53\u4f7f\u7528\u5f15\u7528, \u9700\u8981\u4e3a \u6bcf\u4e2a\u5f15\u7528\u6807\u6ce8\u751f\u547d\u5468\u671f, \u6bcf\u4e2a\u5f15\u7528 \u9700\u8981 \u6bd4\u7ed3\u6784\u4f53\u6d3b\u5f97\u4e45.</p> <pre><code>struct NoCopyType {}\nstruct Example&lt;'a, 'b&gt; {\na: &amp;'a u32,\nb: &amp;'b NoCopyType\n}\n\nfn fix_me&lt;'a&gt;(foo: &amp;Example&lt;'_, 'a&gt;) -&gt; &amp;'a NoCopyType {\nfoo.b\n}\n\nfn main() {\nlet no_copy = NoCopyType {};\nlet example = Example { a: &amp;1, b: &amp;no_copy };\nfix_me(&amp;example);\n}\n</code></pre> </li> <li> <p>\u51fd\u6570\u6216\u65b9\u6cd5\u4e2d, \u53c2\u6570\u7684\u751f\u547d\u5468\u671f\u79f0\u4e3a <code>\u8f93\u5165\u751f\u547d\u5468\u671f</code>, \u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\u79f0\u4e3a <code>\u8f93\u51fa\u751f\u547d\u5468\u671f</code>. \u4ecb\u7ecd \u751f\u547d\u5468\u671f\u6d88\u9664\u89c4\u5219 (\u7f16\u8bd1\u5668\u53d1\u73b0\u4e09\u6761\u89c4\u5219\u90fd\u4e0d\u9002\u7528\u5c31\u4f1a\u62a5\u9519):</p> <ul> <li>\u6bcf\u4e2a \u5f15\u7528\u53c2\u6570 \u90fd\u4f1a\u83b7\u5f97 \u72ec\u81ea\u7684\u751f\u547d\u5468\u671f.</li> <li>\u53ea\u6709\u4e00\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f, \u90a3\u4e48\u8be5\u751f\u547d\u5468\u671f\u4f1a\u88ab \u8d4b\u7ed9\u6240\u6709\u8f93\u51fa\u751f\u547d\u5468\u671f.</li> <li>\u5b58\u5728\u591a\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f, \u5176\u4e2d\u4e00\u4e2a\u662f <code>&amp;self</code> \u6216 <code>&amp;mut self</code>, \u5219 <code>&amp;self</code> \u7684\u751f\u547d\u5468\u671f\u88ab \u8d4b\u7ed9\u6240\u6709\u8f93\u51fa\u751f\u547d\u5468\u671f.</li> </ul> </li> <li> <p>\u4e3a\u5177\u6709\u751f\u547d\u5468\u671f\u7684\u7ed3\u6784\u4f53 \u5b9e\u73b0\u65b9\u6cd5, \u8bed\u6cd5\u548c \u6cdb\u578b\u53c2\u6570\u8bed\u6cd5 \u5f88\u76f8\u4f3c.</p> <pre><code>struct ImportantExcerpt&lt;'a&gt; {\npart: &amp;'a str,\n}\n\n// \u751f\u547d\u5468\u671f\u6807\u6ce8\u4e5f\u662f\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u4e00\u90e8\u5206\nimpl&lt;'a&gt; ImportantExcerpt&lt;'a&gt; {\n// \u65b9\u6cd5\u7b7e\u540d\u5f80\u5f80\u65e0\u9700\u6807\u6ce8\u751f\u547d\u5468\u671f, \u5f97\u76ca\u4e8e\u7b2c\u4e00\u548c\u7b2c\u4e09\u6d88\u9664\u89c4\u5219\nfn level(&amp;self) -&gt; i32 {\n3\n}\n}\n</code></pre> </li> <li> <p>\u751f\u547d\u5468\u671f\u7ea6\u675f\u8bed\u6cd5 \u8ddf\u6cdb\u578b\u7ea6\u675f\u76f8\u4f3c, \u7528\u4e8e\u8bf4\u660e <code>'a</code> \u5fc5\u987b\u6bd4 <code>'b</code> \u6d3b\u5f97\u4e45.</p> <pre><code>impl&lt;'a: 'b, 'b&gt; ImportantExcerpt&lt;'a&gt; {\nfn rtn_part(&amp;'a self, announcement: &amp;'b str) -&gt; &amp;'b str {\nprintln!(\"Attention please: {}\", announcement);\nself.part\n}\n}\n</code></pre> </li> <li> <p><code>'static</code> \u751f\u547d\u5468\u671f \u8868\u793a\u548c\u7a0b\u5e8f\u6d3b\u5f97\u4e00\u6837\u4e45 (\u786c\u7f16\u7801\u5b57\u7b26\u4e32\u5b57\u9762\u91cf \u548c \u7279\u5f81\u5bf9\u8c61).</p> <pre><code>fn main() {\nlet result;\n{\n// \u5199\u6cd5\u4e00 \u00d7\n// \u5b57\u7b26\u4e32\u5728 `}` \u7ed3\u675f\u540e drop \u4e86, \u5f15\u7528\u5931\u6548\n// let s1 = String::from(\"a\");\n// let s2 = String::from(\"abc\");\n// result = longest(s1.as_str(), s2.as_str());\n\n// \u5199\u6cd5\u4e8c \u221a\n// \u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u672c\u8eab\u7684\u751f\u547d\u5468\u671f\u662f `'static`\nlet s1 = \"abc\";\nlet s2 = \"a\";\nresult = longest(s1, s2);\n}\nprintln!(\"result: {}\", result);\n}\n</code></pre> </li> <li> <p>\u7efc\u5408\u8fd0\u7528\u5b9e\u4f8b: \u5b9e\u73b0\u4e00\u4e2a \u7b80\u5355\u7684\u5b57\u8282\u7f13\u51b2\u533a.</p> <pre><code>struct Buffer&lt;'a&gt; {\nbuf: &amp;'a [u8],\npos: usize,\n}\n\nimpl&lt;'b, 'a: 'b&gt; Buffer&lt;'a&gt; {\nfn new(b: &amp;'a [u8]) -&gt; Buffer {\nBuffer {\nbuf: b,\npos: 0,\n}\n}\n\nfn read_bytes(&amp;'b mut self) -&gt; &amp;'a [u8] {\nself.pos += 3;\n&amp;self.buf[self.pos-3..self.pos]\n}\n}\n\nfn print(b1 :&amp;[u8], b2: &amp;[u8]) {\nprintln!(\"{:#?} {:#?}\", b1, b2)\n}\n\nfn main() {\nlet v = vec![1, 2, 3, 4, 5, 6];\nlet mut buf = Buffer::new(&amp;v);\nlet b1 = buf.read_bytes();\nlet b2 = buf.read_bytes();\nprint(b1, b2)\n}\n</code></pre> </li> </ul>"},{"location":"doc-6/","title":"\u9519\u8bef\u5904\u7406\u4e0e\u9879\u76ee\u7ed3\u6784","text":""},{"location":"doc-6/#panic","title":"<code>panic!</code> \u6df1\u5165\u5256\u6790","text":"<ul> <li> <p>\u5bf9\u4e8e \u4e25\u91cd\u5f71\u54cd\u7a0b\u5e8f\u8fd0\u884c \u7684 \u4e0d\u53ef\u6062\u590d\u9519\u8bef, \u9700\u8981 \u89e6\u53d1 <code>panic</code> \u8fdb\u884c\u89e3\u51b3.</p> </li> <li> <p>\u4f7f\u7528 <code>panic!</code> \u5b8f\u4e3b\u52a8\u89e6\u53d1\u5f02\u5e38, \u53ef\u9009\u62e9 \u76f4\u63a5\u7ec8\u6b62 \u6216\u83b7\u53d6 \u8be6\u7ec6\u7684\u6808\u5c55\u5f00\u4fe1\u606f.</p> <pre><code>&gt; RUST_BACKTRACE=1 cargo run\n\n&gt; thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99', src/main.rs:4:5\nstack backtrace:\n    ...\n</code></pre> </li> <li> <p>\u89e6\u53d1 <code>panic</code> \u7684\u7ebf\u7a0b\u662f <code>main</code> \u7ebf\u7a0b, \u7a0b\u5e8f\u4f1a\u7ec8\u6b62; \u662f \u5176\u5b83\u5b50\u7ebf\u7a0b, \u4e0d\u4f1a\u5bfc\u81f4\u6574\u4e2a\u7a0b\u5e8f\u7684\u7ed3\u675f; \u5982\u679c \u5c55\u5f00\u7ebf\u7a0b\u672c\u8eab <code>panic</code>, \u90a3\u4e48\u5c55\u5f00\u4e5f\u4f1a\u968f\u4e4b\u505c\u6b62.</p> </li> </ul>"},{"location":"doc-6/#result","title":"\u8fd4\u56de\u503c <code>Result</code> \u548c <code>?</code>","text":"<ul> <li> <p>\u901a\u8fc7 <code>Result</code> \u679a\u4e3e \u63d0\u4f9b\u6210\u529f\u6216\u9519\u8bef\u4fe1\u606f.</p> <pre><code>use std::fs::File;\nuse std::io::ErrorKind::NotFound;\n\nfn main() {\nlet f = File::open(\"hello.txt\");\nlet f = match f {\nOk(file) =&gt; file,\nErr(err) =&gt; match err.kind() {\nNotFound =&gt; match File::create(\"hello.txt\") {\nOk(fc) =&gt; fc,\nErr(e) =&gt; panic!(\"Failed to create: {:?}\", e),\n},\nerr =&gt; panic!(\"Failed to open: {:?}\", err),\n},\n};\n}\n</code></pre> </li> <li> <p>\u4f7f\u7528 <code>unwrap</code> \u548c <code>expect</code> \u7b80\u5316 \u9519\u8bef\u5904\u7406, \u5982\u679c\u5931\u8d25\u5c31\u76f4\u63a5 <code>panic</code>.</p> <pre><code>use std::fs::File;\nfn main() {\nlet f = File::open(\"hello.txt\").unwrap();\nlet f = File::open(\"hello.txt\").expect(\"Failed!\");\n}\n</code></pre> </li> <li> <p><code>?</code> \u662f\u4e00\u4e2a <code>Result</code> \u4e2d \u8fdb\u884c\u9519\u8bef\u4f20\u64ad\u7684\u5b8f, \u53ef\u4ee5 \u81ea\u52a8\u8fdb\u884c\u7c7b\u578b\u63d0\u5347.</p> <ul> <li>\u6807\u51c6\u5e93\u7684 <code>From</code> \u7279\u5f81 \u6709 \u65b9\u6cd5 <code>from</code> \u7528\u4e8e\u7c7b\u578b\u8f6c\u6362.</li> <li><code>?</code> \u81ea\u52a8\u8c03\u7528\u8be5\u65b9\u6cd5\u8fdb\u884c \u9690\u5f0f\u7c7b\u578b\u8f6c\u6362, \u4f46\u53ea\u80fd\u7528\u5728 \u8fd4\u56de\u503c\u7279\u6b8a \u7684\u65b9\u6cd5.</li> <li>\u53ea\u8981 <code>ReturnError</code> \u5b9e\u73b0 <code>From&lt;OtherError&gt;</code> \u7279\u5f81, \u5c31\u4f1a\u81ea\u52a8\u8fdb\u884c\u8f6c\u6362.</li> <li>\u7528\u4e00\u4e2a\u8fd4\u56de\u7c7b\u578b \u8986\u76d6\u6240\u6709\u9519\u8bef\u7c7b\u578b, \u5e76\u4e3a \u5b50\u9519\u8bef\u7c7b\u578b\u5b9e\u73b0\u8fd9\u79cd\u8f6c\u6362.</li> </ul> <pre><code>use std::fs::File;\nuse std::io::{self, Read};\n\nfn read_username_from_file() -&gt; Result&lt;String, io::Error&gt; {\nlet f = File::open(\"hello.txt\");\nlet mut f = match f {\nOk(file) =&gt; file,\nErr(e) =&gt; return Err(e), // \u5411\u4e0a\u4f20\u64ad\n};\nlet mut s = String::new();\nmatch f.read_to_string(&amp;mut s) {\nOk(_) =&gt; Ok(s),\nErr(e) =&gt; Err(e), // \u5411\u4e0a\u4f20\u64ad\n}\n}\n------------------------------------------------------\nuse std::fs::File;\nuse std::io;\nuse std::io::Read;\n\nfn read_username_from_file() -&gt; Result&lt;String, io::Error&gt; {\nlet mut f = File::open(\"hello.txt\")?;\nlet mut s = String::new();\nf.read_to_string(&amp;mut s)?;\nOk(s)\n}\n------------------------------------------------------\nuse std::fs::File;\nuse std::io;\nuse std::io::Read;\n\nfn read_username_from_file() -&gt; Result&lt;String, io::Error&gt; {\nlet mut s = String::new();\nFile::open(\"hello.txt\")?.read_to_string(&amp;mut s)?;\nOk(s)\n}\n</code></pre> </li> <li> <p><code>?</code> \u4e5f\u53ef\u4ee5\u5728 <code>Option</code> \u4e2d \u8fdb\u884c\u4f20\u64ad, \u8fdb\u884c <code>None</code> \u7684\u8fd4\u56de.</p> <pre><code>fn last_char_of_first_line(text: &amp;str) -&gt; Option&lt;char&gt; {\ntext.lines().next()?.chars().last()\n}\n</code></pre> </li> <li> <p><code>map</code> \u548c <code>and_then</code> \u662f\u5e38\u7528 \u7ec4\u5408\u5668, \u53ef\u7528\u4e8e <code>Result</code> \u4e0e <code>Option</code>.</p> <pre><code>pub fn and_then&lt;U, F&gt;(self, op: F) -&gt; Result&lt;U, E&gt;\nwhere F: FnOnce(T) -&gt; Result&lt;U, E&gt;,\n\npub fn map&lt;U, F&gt;(self, op: F) -&gt; Result&lt;U, E&gt;\nwhere F: FnOnce(T) -&gt; U,\n</code></pre> <p>\u4e00\u4e9b \u5e94\u7528\u5b9e\u4f8b:</p> <pre><code>use std::num::ParseIntError;\n\nfn add_two(n_str: &amp;str) -&gt; Result&lt;i32, ParseIntError&gt; {\nn_str.parse::&lt;i32&gt;().map(|num| num + 2)\n}\n\nfn add_three(n_str: &amp;str) -&gt; Result&lt;i32, ParseIntError&gt; {\nn_str.parse::&lt;i32&gt;().and_then(|num| Ok(num + 3))\n}\n\nfn main() {\nassert_eq!(add_two(\"4\").unwrap(), 6);\nassert_eq!(add_three(\"5\").unwrap(), 8);\n}\n------------------------------------------------------\nuse std::num::ParseIntError;\n\nfn multiply(n1_str: &amp;str, n2_str: &amp;str) -&gt; Result&lt;i32, ParseIntError&gt; {\nn1_str.parse::&lt;i32&gt;().and_then(|n1| {\nn2_str.parse::&lt;i32&gt;().map(|n2| n1 * n2)\n})\n}\n\nfn main() {\nlet twenty = multiply(\"10\", \"2\");\n}\n</code></pre> </li> <li> <p>\u4e3a <code>Result</code> \u4f7f\u7528 \u7c7b\u578b\u522b\u540d \u6765 \u7b80\u5316\u4ee3\u7801.</p> <pre><code>use std::num::ParseIntError;\ntype Res&lt;T&gt; = Result&lt;T, ParseIntError&gt;;\n\nfn multiply(n1_str: &amp;str, n2_str: &amp;str) -&gt; Res&lt;i32&gt; {\n// ...    \n}\n</code></pre> </li> <li> <p><code>main</code> \u51fd\u6570\u53ef\u4ee5 \u8fd4\u56de <code>Result</code> \u7c7b\u578b, \u53d1\u751f\u9519\u8bef\u65f6\u4f1a \u8fd4\u56de\u8be5\u9519\u8bef\u5e76\u6253\u5370\u4fe1\u606f.</p> <pre><code>fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\nlet n_str = \"10\";\nlet num = match n_str.parse::&lt;i32&gt;() {\nOk(num)  =&gt; num,\nErr(e) =&gt; return Err(Box::new(e))\n};\nprintln!(\"{}\", num);\nOk(())\n}\n</code></pre> </li> </ul>"},{"location":"doc-6/#crate-package","title":"Crate \u548c Package","text":"<ul> <li> <p><code>Crate</code> \u662f \u72ec\u7acb\u7684\u53ef\u7f16\u8bd1\u5355\u5143, \u7f16\u8bd1\u540e\u751f\u6210 \u53ef\u6267\u884c\u6587\u4ef6 \u6216\u8005 \u5e93, \u4f7f\u7528 <code>use</code> \u5f15\u5165.</p> </li> <li> <p><code>Package</code> \u5305\u542b \u72ec\u7acb\u7684 <code>Cargo.toml</code> \u6587\u4ef6, \u4ee5\u53ca \u7ec4\u7ec7\u5728\u4e00\u8d77\u7684\u6570\u4e2a\u5305.</p> </li> <li> <p>\u5e93\u7c7b\u578b <code>Package</code> \u53ea\u80fd\u4f5c\u4e3a \u7b2c\u4e09\u65b9\u5e93 \u88ab\u5176\u5b83\u9879\u76ee\u5f15\u7528, \u800c \u4e0d\u80fd\u72ec\u7acb\u8fd0\u884c.</p> </li> <li> <p>\u5178\u578b \u7684 <code>Package</code> \u4f1a\u5305\u542b \u591a\u4e2a\u4e8c\u8fdb\u5236\u5305:</p> <pre><code>\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 main.rs\n\u2502   \u251c\u2500\u2500 lib.rs\n\u2502   \u2514\u2500\u2500 bin\n\u2502       \u2514\u2500\u2500 main1.rs\n\u2502       \u2514\u2500\u2500 main2.rs\n\u251c\u2500\u2500 tests\n\u2502   \u2514\u2500\u2500 some_integration_tests.rs\n\u251c\u2500\u2500 benches\n\u2502   \u2514\u2500\u2500 simple_bench.rs\n\u2514\u2500\u2500 examples\n    \u2514\u2500\u2500 simple_example.rs\n</code></pre> </li> </ul>"},{"location":"doc-6/#module","title":"\u6a21\u5757 Module","text":"<ul> <li> <p>\u5982\u679c\u6a21\u5757 <code>A</code> \u5305\u542b\u6a21\u5757 <code>B</code>, \u90a3\u4e48 <code>A</code> \u662f <code>B</code> \u7684 \u7236\u6a21\u5757, <code>B</code> \u662f <code>A</code> \u7684 \u5b50\u6a21\u5757.</p> <pre><code>/* src/lib.rs */\nmod front_of_house {\nmod hosting {\nfn add_to_waitlist() {}\nfn seat_at_table() {}\n}\nmod serving {\nfn take_order() {}\nfn serve_order() {}\nfn take_payment() {}\n}\n}\n\npub fn eat_at_restaurant() {\n// \u7edd\u5bf9\u8def\u5f84\ncrate::front_of_house::hosting::add_to_waitlist();\n// \u76f8\u5bf9\u8def\u5f84\nfront_of_house::hosting::add_to_waitlist();\n}\n</code></pre> <p>\u5176\u4e2d <code>front_of_house</code> \u662f <code>hosting</code> \u548c <code>serving</code> \u7684 \u7236\u6a21\u5757. \u5bf9\u5e94\u7684 \u6a21\u5757\u6811:</p> <pre><code>crate\n\u2514\u2500\u2500 eat_at_restaurant\n\u2514\u2500\u2500 front_of_house\n\u251c\u2500\u2500 hosting\n\u2502   \u251c\u2500\u2500 add_to_waitlist\n\u2502   \u2514\u2500\u2500 seat_at_table\n\u2514\u2500\u2500 serving\n\u251c\u2500\u2500 take_order\n\u251c\u2500\u2500 serve_order\n\u2514\u2500\u2500 take_payment\n</code></pre> </li> <li> <p>\u6a21\u5757\u5b9a\u4e49\u4e86 \u4ee3\u7801\u7684\u79c1\u6709\u5316\u8fb9\u754c, \u7236\u6a21\u5757\u65e0\u6cd5\u8bbf\u95ee \u5b50\u6a21\u5757\u4e2d\u7684\u79c1\u6709\u9879, \u4f46 \u5b50\u6a21\u5757\u53ef\u4ee5\u8bbf\u95ee \u7236\u6a21\u5757\u7b49\u7684\u79c1\u6709\u9879. \u8fdb\u884c\u4fee\u6539:</p> <pre><code>mod front_of_house {\npub mod hosting {\npub fn add_to_waitlist() {}\n}\n}\n\npub fn eat_at_restaurant() { /*--- snip ----*/ }\n</code></pre> </li> <li> <p><code>super</code> \u4ee3\u8868 \u7236\u6a21\u5757\u4e3a\u5f00\u59cb \u7684\u5f15\u7528\u65b9\u5f0f, \u7c7b\u4f3c\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684 <code>../a/b</code> \u8bed\u6cd5.</p> <pre><code>fn serve_order() {}\n\nmod back_of_house {\nfn fix_incorrect_order() {\ncook_order();\nsuper::serve_order();\n}\nfn cook_order() {}\n}\n</code></pre> </li> <li> <p><code>self</code> \u76f4\u63a5 \u5f15\u7528\u81ea\u8eab\u6a21\u5757 \u4e2d\u7684\u9879, \u7c7b\u4f3c\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684 <code>./a/b</code> \u8bed\u6cd5.</p> <ul> <li><code>use self::x</code> \u8868\u793a\u52a0\u8f7d\u5f53\u524d\u6a21\u5757\u4e2d\u7684 <code>x</code>, \u6b64\u65f6 <code>self</code> \u53ef\u7701\u7565.</li> <li><code>use x::{self, y}</code> \u8868\u793a\u52a0\u8f7d\u5f53\u524d\u8def\u5f84\u4e0b\u6a21\u5757 <code>x</code> \u672c\u8eab\u4ee5\u53ca\u5176\u4e0b\u7684 <code>y</code>.</li> </ul> <pre><code>fn serve_order() {\nself::back_of_house::cook_order()\n}\n\nmod back_of_house {\nfn fix_incorrect_order() {\ncook_order();\ncrate::serve_order();\n}\npub fn cook_order() {}\n}\n</code></pre> </li> <li> <p>\u5c06 \u7ed3\u6784\u4f53 \u8bbe\u7f6e\u4e3a <code>pub</code>, \u5b83\u7684 \u6240\u6709\u5b57\u6bb5\u4f9d\u7136\u79c1\u6709.</p> </li> <li> <p>\u5c06 \u679a\u4e3e \u8bbe\u7f6e\u4e3a <code>pub</code>, \u5b83\u7684 \u6240\u6709\u5b57\u6bb5\u5c06\u5bf9\u5916\u53ef\u89c1.</p> </li> <li> <p>\u5f53 \u6a21\u5757\u6709\u8f83\u591a\u5b50\u6a21\u5757\u65f6, \u53ef\u4ee5\u901a\u8fc7 \u6587\u4ef6\u5939\u7684\u65b9\u5f0f \u6765\u7ec4\u7ec7\u5b50\u6a21\u5757.</p> </li> <li> <p><code>main</code> \u51fd\u6570 \u5e94\u8be5\u5305\u542b\u7684\u529f\u80fd:</p> <ul> <li>\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570.</li> <li>\u521d\u59cb\u5316\u5176\u5b83\u914d\u7f6e.</li> <li>\u8c03\u7528 <code>lib.rs</code> \u4e2d\u7684 <code>run</code> \u51fd\u6570, \u542f\u52a8\u903b\u8f91\u4ee3\u7801\u8fd0\u884c.</li> <li>\u5982\u679c <code>run</code> \u8fd4\u56de\u9519\u8bef, \u9700\u8981\u8fdb\u884c\u9519\u8bef\u5904\u7406.</li> </ul> </li> </ul>"}]}